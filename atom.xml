<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lencx&#39;s blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://lencx.github.io/blog/"/>
  <updated>2017-04-11T15:16:32.000Z</updated>
  <id>https://lencx.github.io/blog/</id>
  
  <author>
    <name>Len C...</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS - Base</title>
    <link href="https://lencx.github.io/blog/2017/04/11/js-base/"/>
    <id>https://lencx.github.io/blog/2017/04/11/js-base/</id>
    <published>2017-04-11T09:11:10.000Z</published>
    <updated>2017-04-11T15:16:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>JS：</strong> 常用方法总结</p>
</blockquote>
<a id="more"></a>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lg</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(...args)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> str = <span class="string">'hello js'</span></div><div class="line"></div><div class="line"><span class="comment">// 获取字符串长度</span></div><div class="line">lg(str.length) <span class="comment">// 8</span></div><div class="line"></div><div class="line"><span class="comment">// 转换为大写</span></div><div class="line">lg(str.toUpperCase()) <span class="comment">// HELLO JS</span></div><div class="line"></div><div class="line"><span class="comment">// 字符访问</span></div><div class="line"><span class="comment">// charAt()访问或将`str`视为一个数组，使用数字索引进行访问</span></div><div class="line">lg(str.charAt(<span class="number">2</span>), str[<span class="number">3</span>]) <span class="comment">// l l</span></div><div class="line"></div><div class="line"><span class="comment">// 字符串比较</span></div><div class="line"><span class="keyword">let</span> a = <span class="string">'a'</span></div><div class="line"><span class="keyword">let</span> b = <span class="string">'b'</span></div><div class="line"><span class="comment">// a is less than b</span></div><div class="line">a &lt; b ? lg(<span class="string">`<span class="subst">$&#123;a&#125;</span> is less than <span class="subst">$&#123;b&#125;</span>`</span>) : lg(<span class="string">`<span class="subst">$&#123;a&#125;</span> is greater or equal <span class="subst">$&#123;b&#125;</span>`</span>)</div><div class="line"><span class="comment">// 使用`localeCompare()`比较</span></div><div class="line"><span class="comment">// 前者小于后者，返回`-1`；前者大于后者则返回`1`；相等时，返回`0`</span></div><div class="line">lg(a.localeCompare(b)) <span class="comment">// -1</span></div><div class="line">lg(b.localeCompare(a)) <span class="comment">// 1</span></div><div class="line">lg(b.localeCompare(<span class="string">'b'</span>)) <span class="comment">// 0</span></div><div class="line"></div><div class="line"><span class="comment">// 原始字符，不转义</span></div><div class="line">lg(<span class="built_in">String</span>.raw<span class="string">`<span class="subst">$&#123;str&#125;</span>\n 没有换行`</span>)</div><div class="line"></div><div class="line"><span class="comment">// 多个字符串连接</span></div><div class="line"><span class="keyword">let</span> str2 = <span class="string">'hello css,'</span></div><div class="line"><span class="keyword">let</span> str3 = <span class="string">' html '</span></div><div class="line"><span class="keyword">let</span> str4 = <span class="string">'...'</span></div><div class="line">lg(str2.concat(str3, str4)) <span class="comment">// hello css, html ...</span></div><div class="line"></div><div class="line"><span class="comment">// 在另一个字符串中找到一个字符串，返回`true`或`false`</span></div><div class="line"><span class="keyword">let</span> strOne = <span class="string">'hello one'</span></div><div class="line"><span class="keyword">let</span> strTwo = <span class="string">'hello'</span></div><div class="line">strOne.includes(strTwo) <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 判断一个字符串是否以另一个字符串结尾，返回`true`或`false`</span></div><div class="line"><span class="keyword">let</span> strEnds = <span class="string">'hello 123 456 js.'</span></div><div class="line">lg(strEnds.endsWith(<span class="string">'js.'</span>)) <span class="comment">// true</span></div><div class="line">lg(strEnds.endsWith(<span class="string">'456'</span>)) <span class="comment">// false</span></div><div class="line">lg(strEnds.endsWith(<span class="string">'456'</span>, <span class="number">13</span>)) <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// `indexOf()`返回指定值的第一次出现调用`String`对象中的索引。如果找不到则返回`-1`</span></div><div class="line"><span class="comment">// `lastIndexOf()`返回指定值的最后一次出现调用`String`对象中的索引。如果找不到则返回`-1`</span></div><div class="line"><span class="keyword">let</span> hello = <span class="string">'hello len'</span></div><div class="line">lg(hello.indexOf(<span class="string">'len'</span>)) <span class="comment">// 6</span></div><div class="line">lg(hello.indexOf(<span class="string">'lencx'</span>)) <span class="comment">// -1</span></div><div class="line"><span class="comment">// The index of the first l from the beginning is 2</span></div><div class="line">lg(<span class="string">`The index of the first l from the beginning is <span class="subst">$&#123;hello.indexOf(<span class="string">'l'</span>)&#125;</span>`</span>)</div><div class="line"><span class="comment">// The index of the last l from the beginning is 6</span></div><div class="line">lg(<span class="string">`The index of the last l from the beginning is <span class="subst">$&#123;hello.lastIndexOf(<span class="string">'l'</span>)&#125;</span>`</span>)</div><div class="line"></div><div class="line"><span class="comment">// 在匹配字符串与正则表达式时检索匹配项</span></div><div class="line"><span class="comment">// 打印结果请看附图一</span></div><div class="line"><span class="keyword">let</span> str5 = <span class="string">'For more information, see Chapter 3.4.5.2'</span></div><div class="line"><span class="keyword">let</span> re = <span class="regexp">/see (chapter \d+(\.\d)*)/i</span></div><div class="line"><span class="keyword">let</span> found = str5.match(re)</div><div class="line"><span class="built_in">console</span>.log(found)</div><div class="line"><span class="comment">// `0: see Chapter 3.4.5.2`是整个匹配的值</span></div><div class="line"><span class="comment">// `1: Chapter 3.4.5.2`是被`(chapter \d+(\.\d)*)`捕获</span></div><div class="line"><span class="comment">// `2: .2`是最后被`(\.\d)`捕获的值</span></div><div class="line"><span class="comment">// `index: 22`是整个匹配的从零开始的索引</span></div><div class="line"><span class="comment">// `input: For more information, see Chapter 3.4.5.2`是被解析的原始字符串</span></div><div class="line"><span class="comment">// 使用全局和忽略大小写匹配</span></div><div class="line"><span class="keyword">let</span> str6 = <span class="string">'AFHDNQUDIEcsjdhjrgjkviqkzcj'</span></div><div class="line"><span class="keyword">let</span> _re = <span class="regexp">/[A-G]/gi</span></div><div class="line"><span class="built_in">console</span>.log(str6.match(_re)) <span class="comment">// ["A", "F", "D", "D", "E", "c", "d", "g", "c"]</span></div><div class="line"></div><div class="line"><span class="comment">// 字符串替换</span></div><div class="line"><span class="comment">// 替换模式请看附表一</span></div><div class="line"><span class="keyword">let</span> str7 = <span class="string">'hi, Len.'</span></div><div class="line"><span class="keyword">let</span> str7New = str7.replace(<span class="regexp">/len/i</span>, <span class="string">'Lencx'</span>)</div><div class="line"><span class="built_in">console</span>.log(str7New) <span class="comment">// hi, Lencx.</span></div><div class="line"><span class="comment">// 全局替换并且忽略大小写</span></div><div class="line"><span class="keyword">let</span> apple = <span class="string">'Apples are round, and apples are juicy.'</span></div><div class="line"><span class="keyword">let</span> appleNew = apple.replace(<span class="regexp">/apples/gi</span>, <span class="string">'oranges'</span>)</div><div class="line"><span class="built_in">console</span>.log(appleNew) <span class="comment">// oranges are round, and oranges are juicy.</span></div><div class="line"></div><div class="line"><span class="comment">// 切换字符串中的单词</span></div><div class="line"><span class="comment">// 如果需切换多个单词的位置，则需写对应的匹配规则，然后用`$n`在对应位置进行插入</span></div><div class="line"><span class="keyword">let</span> switchWords = <span class="string">'Len C'</span></div><div class="line"><span class="keyword">let</span> switchWordsNew = switchWords.replace(<span class="regexp">/(\w+)\s(\w+)/</span>, <span class="string">'$2, $1'</span>)</div><div class="line"><span class="built_in">console</span>.log(switchWordsNew)</div><div class="line"></div><div class="line"><span class="comment">// 将字符串中出现的大写字母全部替换为小写字母，并在替换的字母前插入`_`连字符</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hyphenFormat</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">upperToHyphenLower</span>(<span class="params">match</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'-'</span> + match.toLowerCase()</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[A-Z]/g</span>, upperToHyphenLower)</div><div class="line">&#125;</div><div class="line"><span class="comment">// asda-a-hjfdkfj-u-l-dshvxt-r</span></div><div class="line"><span class="built_in">console</span>.log(hyphenFormat(<span class="string">'asdaAHjfdkfjULDshvxtR'</span>))</div><div class="line"><span class="comment">// 如果使用`$&amp;`则转换大小写将不会工作，这是因为`toLowerCase()`将`$&amp;`作为字符串文字进行转换，然后再使用字符作为模式</span></div><div class="line"><span class="comment">// asda-A-Hjfdkfj-U-L-Dshvxt-R</span></div><div class="line"><span class="string">'asdaAHjfdkfjULDshvxtR'</span>.replace(<span class="regexp">/[A-Z]/g</span>, <span class="string">'-$&amp;'</span>.toLowerCase())</div><div class="line"></div><div class="line"><span class="comment">// 搜索正则表达式和此字符串之间进行匹配，返回匹配到的第一个字符的索引</span></div><div class="line"><span class="string">'nsa ff asac hh f'</span>.search(<span class="regexp">/f/</span>) <span class="comment">// 4</span></div><div class="line"></div><div class="line"><span class="comment">// 提取字符串的一部分并返回一个新的字符串</span></div><div class="line"><span class="keyword">let</span> str8 = <span class="string">'Using slice() to create a new string.'</span></div><div class="line"><span class="keyword">let</span> str8One = str8.slice(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line"><span class="keyword">let</span> str8Two = str8.slice(<span class="number">6</span>, <span class="number">20</span>)</div><div class="line"><span class="keyword">let</span> str8Three = str8.slice(<span class="number">17</span>)</div><div class="line"><span class="built_in">console</span>.log(str8One) <span class="comment">// sing slic</span></div><div class="line"><span class="built_in">console</span>.log(str8Two) <span class="comment">// slice() to cre</span></div><div class="line"><span class="built_in">console</span>.log(str8Three) <span class="comment">// create a new string.</span></div><div class="line"></div><div class="line"><span class="comment">// 将字符串分割为子字符串数组</span></div><div class="line"><span class="comment">// 打印结果请看附图二</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitStr</span>(<span class="params">str, separator</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> arr = str.split(separator)</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`The original string is "<span class="subst">$&#123;str&#125;</span>"`</span>)</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`The separator is <span class="subst">$&#123;separator&#125;</span>`</span>)</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`The array has <span class="subst">$&#123;arr.length&#125;</span> \n elements: <span class="subst">$&#123;arr.join(<span class="string">'-'</span>)&#125;</span>`</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> infoStr = <span class="string">'My name is Len.'</span></div><div class="line"><span class="keyword">let</span> monthStr = <span class="string">'Jan,Feb,Mar,Apr'</span></div><div class="line">splitStr(infoStr, <span class="string">' '</span>)</div><div class="line">splitStr(monthStr, <span class="string">','</span>)</div><div class="line"><span class="comment">// 移除空格和分号</span></div><div class="line"><span class="keyword">let</span> nameStr = <span class="string">'Len ; Tom ;  Wendy; Mia'</span></div><div class="line"><span class="keyword">let</span> _regex = <span class="regexp">/\s*;\s*/</span></div><div class="line"><span class="keyword">let</span> nameRe = nameStr.split(_regex).join(<span class="string">''</span>)</div><div class="line"><span class="built_in">console</span>.log(nameRe) <span class="comment">// LenTomWendyMia</span></div><div class="line"><span class="comment">// 限制返回数组元素的数量</span></div><div class="line"><span class="keyword">let</span> limitArr = <span class="string">'hello world. How are you?'</span></div><div class="line"><span class="built_in">console</span>.log(limitArr.split(<span class="string">' '</span>, <span class="number">3</span>)) <span class="comment">// ["hello", "world.", "How"]</span></div><div class="line"></div><div class="line"><span class="comment">// 转换成小写字母</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'HDKJWC'</span>.toLowerCase()) <span class="comment">// hdkjwc</span></div><div class="line"></div><div class="line"><span class="comment">// 转换成大写字母</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'jkadjakjv'</span>.toUpperCase()) <span class="comment">// JKADJAKJV</span></div><div class="line"></div><div class="line"><span class="comment">// 返回指定对象的字符串</span></div><div class="line"><span class="keyword">let</span> num = <span class="number">2</span></div><div class="line"><span class="keyword">let</span> numToStr = num.toString()</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> numToStr, numToStr) <span class="comment">// string 2</span></div><div class="line"></div><div class="line"><span class="comment">// 修剪头尾空格</span></div><div class="line"><span class="keyword">let</span> spaceStr = <span class="string">'   foo as  s '</span></div><div class="line"><span class="built_in">console</span>.log(spaceStr.trim()) <span class="comment">// foo as  s</span></div><div class="line"></div><div class="line"><span class="comment">// 返回两个索引之间的字符串，一个参数时，则返回该索引到字符串末尾的字符串</span></div><div class="line"><span class="keyword">let</span> hi = <span class="string">'hello world'</span></div><div class="line"><span class="built_in">console</span>.log(hi.substring(<span class="number">3</span>, <span class="number">7</span>)) <span class="comment">// lo w</span></div><div class="line"><span class="built_in">console</span>.log(hi.substring(<span class="number">7</span>, <span class="number">3</span>)) <span class="comment">// lo w</span></div><div class="line"><span class="built_in">console</span>.log(hi.substring(<span class="number">4</span>, <span class="number">8</span>)) <span class="comment">// o wo</span></div><div class="line"><span class="built_in">console</span>.log(hi.substring(<span class="number">4</span>)) <span class="comment">// o world</span></div><div class="line"><span class="built_in">console</span>.log(hi.substring(<span class="number">0</span>, <span class="number">15</span>)) <span class="comment">// hello world</span></div><div class="line"><span class="built_in">console</span>.log(hi.substring(hi.length <span class="number">-4</span>)) <span class="comment">// orld</span></div><div class="line"></div><div class="line"><span class="comment">// 通过指定字符数返回指定位置的字符串中的字符</span></div><div class="line"><span class="keyword">let</span> subStr = <span class="string">'ascfbhsc'</span></div><div class="line"><span class="built_in">console</span>.log(subStr.substr(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// cfb</span></div><div class="line"><span class="built_in">console</span>.log(subStr.substr(<span class="number">-5</span>, <span class="number">3</span>)) <span class="comment">// fbh</span></div><div class="line"><span class="built_in">console</span>.log(subStr.substr(<span class="number">-2</span>)) <span class="comment">// sc</span></div><div class="line"><span class="built_in">console</span>.log(subStr.substr(<span class="number">2</span>)) <span class="comment">// cfbhsc</span></div><div class="line"><span class="built_in">console</span>.log(subStr.substr(<span class="number">20</span>)) <span class="comment">// 返回值为空</span></div><div class="line"><span class="built_in">console</span>.log(subStr.substr(<span class="number">-20</span>)) <span class="comment">// ascfbhsc</span></div></pre></td></tr></table></figure>
<h3 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h3><ul>
<li><p>图一<br><img src="/blog/images/js/js-str-match.png" alt="String match()"></p>
</li>
<li><p>图二<br><img src="/blog/images/js/js-str-split.png" alt="String match()"></p>
</li>
<li><p>表一</p>
</li>
</ul>
<p>替换字符串可以包含以下特殊替换模式</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>插入</th>
</tr>
</thead>
<tbody>
<tr>
<td>$$</td>
<td>插入一个<code>$</code></td>
</tr>
<tr>
<td>$&amp;</td>
<td>插入匹配的字符串</td>
</tr>
<tr>
<td>$`</td>
<td>插入匹配子字符串之前的字符串部分</td>
</tr>
<tr>
<td>$’</td>
<td>插入匹配子字符串后面的字符串部分</td>
</tr>
<tr>
<td>$n</td>
<td><code>n</code>是小于100的非负整数，插入第n个括号的子匹配字符串，前提第一个参数是<code>RegExp</code>对象</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JS：&lt;/strong&gt; 常用方法总结&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="js" scheme="https://lencx.github.io/blog/categories/js/"/>
    
    
      <category term="js" scheme="https://lencx.github.io/blog/tags/js/"/>
    
      <category term="base" scheme="https://lencx.github.io/blog/tags/base/"/>
    
  </entry>
  
  <entry>
    <title>base-english</title>
    <link href="https://lencx.github.io/blog/2017/04/10/base-english/"/>
    <id>https://lencx.github.io/blog/2017/04/10/base-english/</id>
    <published>2017-04-09T16:01:50.000Z</published>
    <updated>2017-04-11T09:08:42.000Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>en</th>
<th>zh-CN</th>
</tr>
</thead>
<tbody>
<tr>
<td>new concept</td>
<td>新概念</td>
</tr>
<tr>
<td>illustrate</td>
<td>说明</td>
</tr>
<tr>
<td>statements</td>
<td>声明</td>
</tr>
<tr>
<td>assign</td>
<td>分配</td>
</tr>
<tr>
<td>identifiers</td>
<td>标识符</td>
</tr>
<tr>
<td>eaual</td>
<td>等于</td>
</tr>
<tr>
<td>parameter</td>
<td>参数</td>
</tr>
<tr>
<td>defining</td>
<td>定义</td>
</tr>
<tr>
<td>triple</td>
<td>三重</td>
</tr>
<tr>
<td>expressions</td>
<td>表达式</td>
</tr>
<tr>
<td>versus</td>
<td>与</td>
</tr>
<tr>
<td>reason</td>
<td>原因</td>
</tr>
<tr>
<td>syntax</td>
<td>句法</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;en&lt;/th&gt;
&lt;th&gt;zh-CN&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;new concept&lt;/td&gt;
&lt;td&gt;新概念&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;illustrate&lt;/td&gt;
    
    </summary>
    
    
      <category term="English" scheme="https://lencx.github.io/blog/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>ES6 - Array</title>
    <link href="https://lencx.github.io/blog/2017/04/08/es6-array/"/>
    <id>https://lencx.github.io/blog/2017/04/08/es6-array/</id>
    <published>2017-04-08T03:14:48.000Z</published>
    <updated>2017-04-09T15:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 遍历数组</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,len=arr.length; i&lt;len; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(arr[i]) <span class="comment">// 1 2 5 8</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(item) <span class="comment">// 1 2 5 8</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</div><div class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev + curr)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>))</div><div class="line"></div><div class="line"><span class="comment">// 过滤</span></div><div class="line"><span class="keyword">let</span> animal = [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'dog'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'white'</span></div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'dog'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'black'</span></div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'cat'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'white'</span></div><div class="line">  &#125;, &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'cat'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'yellow'</span></div><div class="line">  &#125;</div><div class="line">]</div><div class="line"><span class="keyword">let</span> filterAnimal = animal.filter(<span class="function">(<span class="params">animal</span>) =&gt;</span> animal.type === <span class="string">'dog'</span>)</div><div class="line"><span class="built_in">console</span>.log(filterAnimal)</div><div class="line"></div><div class="line"><span class="comment">// some</span></div><div class="line"><span class="keyword">let</span> a = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]</div><div class="line">a.some(<span class="function">(<span class="params">i</span>) =&gt;</span> <span class="built_in">console</span>.log(i * <span class="number">2</span>)) <span class="comment">// 4 8 10 14</span></div><div class="line"></div><div class="line"><span class="comment">// 数组去重</span></div><div class="line"><span class="comment">// ES5</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> arr.indexOf(item) === index</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// ES6</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique2</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)]</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Array&quot;&gt;&lt;/a&gt;Array&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
    
    </summary>
    
      <category term="js" scheme="https://lencx.github.io/blog/categories/js/"/>
    
    
      <category term="ES6" scheme="https://lencx.github.io/blog/tags/ES6/"/>
    
      <category term="Array" scheme="https://lencx.github.io/blog/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>ES6 - Object</title>
    <link href="https://lencx.github.io/blog/2017/04/08/es6-object/"/>
    <id>https://lencx.github.io/blog/2017/04/08/es6-object/</id>
    <published>2017-04-08T02:33:35.000Z</published>
    <updated>2017-04-09T15:57:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = &#123;</div><div class="line">  <span class="attr">height</span>: <span class="string">'a100'</span>,</div><div class="line">  <span class="attr">width</span>: <span class="string">'a200'</span>,</div><div class="line">  <span class="attr">size</span>: <span class="string">'a400'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> b = &#123;</div><div class="line">  <span class="attr">height</span>: <span class="string">'b100'</span>,</div><div class="line">  <span class="attr">width</span>: <span class="string">'b300'</span>,</div><div class="line">  <span class="attr">weight</span>: <span class="string">'b500'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> c = <span class="built_in">Object</span>.assign(&#123;&#125;, a, b)</div><div class="line"><span class="built_in">console</span>.log(c) <span class="comment">// Object &#123;height: "b100", width: "b300", size: "a400", weight: "b500"&#125;</span></div><div class="line"><span class="keyword">let</span> d = <span class="built_in">Object</span>.assign(&#123;&#125;, b, a)</div><div class="line"><span class="built_in">console</span>.log(d) <span class="comment">// Object &#123;height: "a100", width: "a200", weight: "b500", size: "a400"&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// copy</span></div><div class="line"><span class="keyword">let</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'len'</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">22</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// person2 = person</span></div><div class="line"><span class="comment">// person2.age = 24</span></div><div class="line"><span class="comment">// console.log(person) // Object &#123;name: "len", age: 24&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//let person2 = Object.assign(&#123;&#125;, person)</span></div><div class="line"><span class="comment">//person2.age = 25</span></div><div class="line"><span class="keyword">let</span> person2 = <span class="built_in">Object</span>.assign(&#123;&#125;, person, &#123;<span class="attr">age</span>: <span class="number">25</span>&#125;)</div><div class="line"><span class="built_in">console</span>.log(person, person2)<span class="comment">// Object &#123;name: "len", age: 22&#125; Object &#123;name: "len", age: 25&#125;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Object&quot;&gt;&lt;a href=&quot;#Object&quot; class=&quot;headerlink&quot; title=&quot;Object&quot;&gt;&lt;/a&gt;Object&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
    
    </summary>
    
      <category term="js" scheme="https://lencx.github.io/blog/categories/js/"/>
    
    
      <category term="ES6" scheme="https://lencx.github.io/blog/tags/ES6/"/>
    
      <category term="Object" scheme="https://lencx.github.io/blog/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Promise</title>
    <link href="https://lencx.github.io/blog/2017/04/02/es6-promise/"/>
    <id>https://lencx.github.io/blog/2017/04/02/es6-promise/</id>
    <published>2017-04-02T03:44:10.000Z</published>
    <updated>2017-04-03T11:28:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><blockquote>
<p><code>Promise</code>对象用于异步计算。承诺是<code>Promise</code>创建时不一定知道的值的代理，它允许你将处理程序与异步操作的最终成功的值或失败的原因相关联。异步方法返回一个承诺，以在将来的某个时间提供该值。</p>
</blockquote>
<p><img src="/blog/images/es6/es6-promise.png" alt="Promise"></p>
<ul>
<li><strong>pending：</strong> 初始状态，未履行或拒绝</li>
<li><strong>fulfilled：</strong> 操作成功完成</li>
<li><strong>rejected：</strong> 操作失败</li>
</ul>
<a id="more"></a>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><blockquote>
<blockquote>
<p>属性</p>
</blockquote>
</blockquote>
<ul>
<li>Promise.length<ul>
<li>长度属性始终为<code>1</code>（构造函数参数数量）</li>
</ul>
</li>
<li>Promise.prototype<ul>
<li><code>Promise</code>构造函数的原型</li>
</ul>
</li>
</ul>
<h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><blockquote>
<blockquote>
<p>方法</p>
</blockquote>
</blockquote>
<h4 id="Promise-all-iterable"><a href="#Promise-all-iterable" class="headerlink" title="Promise.all(iterable)"></a>Promise.all(iterable)</h4><blockquote>
<p><code>Promise.all()</code>方法返回一个Promise，它在迭代参数中所有的Promise(承诺)都解决时解决，否则拒绝接受拒绝的第一个Promise(承诺)</p>
</blockquote>
<ul>
<li><strong>Fulfillment：</strong>如果所有的传递承诺都完成，<code>Promsie.all()</code>将按照在<code>iterable</code>中定义的顺序，从传入的承诺中获得一组数组值。如果传递一个空数组，该方法则立即解决。</li>
<li><strong>Rejection：</strong>如果任何通过的承诺拒绝，<code>Promsie.all()</code>立即拒绝具有拒绝承诺的值，无论其他承诺是否已经解决。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 等待所有的履行（或第一个拒绝）</span></div><div class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">123</span>)</div><div class="line"><span class="keyword">let</span> p2 = <span class="string">'abc'</span></div><div class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(resolve, <span class="number">1000</span>, <span class="string">'foo'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(val) <span class="comment">// [123, "abc", "foo"]</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 如果任何元素被拒绝，`Promise.all`立即拒绝。如果你通过超时后解决两个承诺和一个立即拒绝的承诺，那么`Promise.all`将立即拒绝。</span></div><div class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(resolve, <span class="number">500</span>, <span class="string">'a'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(resolve, <span class="number">1000</span>, <span class="string">'b'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  reject(<span class="string">'reject'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(val)</div><div class="line">&#125;, reason =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(reason) <span class="comment">// reject</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 使用`catch`</span></div><div class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(val)</div><div class="line">&#125;).catch(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(reason) <span class="comment">// reject</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>⚠️ ：</strong> <code>Promise.all([...]).then(val =&gt; {...}, reason =&gt; {...})</code>与<code>Promise.all([...]).then(val =&gt; {...}).catch(reason =&gt; {...})</code>是两种写法。</p>
<h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h4><blockquote>
<p><code>Promise.race</code>方法返回一个解决或拒绝的承诺，一旦该迭代中的一个承诺解决或拒绝，则返回。它解决或拒绝，以先发生者为准。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(resolve, <span class="number">800</span>, <span class="string">'a'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(resolve, <span class="number">1000</span>, <span class="string">'b'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(resolve, <span class="number">500</span>, <span class="string">'c'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">let</span> p4 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(reject, <span class="number">700</span>, <span class="string">'d'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">Promise</span>.race([p1, p2, p3]).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(val) <span class="comment">// c</span></div><div class="line">  <span class="comment">// `p1, p2, p3`都解决了，但`p3`最快</span></div><div class="line">&#125;)</div><div class="line"><span class="built_in">Promise</span>.race([p3, p4]).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(val) <span class="comment">// c</span></div><div class="line">  <span class="comment">// `p3`更快，所以解决了</span></div><div class="line">&#125;, reason =&gt; &#123;</div><div class="line">  <span class="comment">// Not called</span></div><div class="line">&#125;)</div><div class="line"><span class="built_in">Promise</span>.race([p2, p4]).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// Not called</span></div><div class="line">&#125;, reason =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(reason) <span class="comment">// d</span></div><div class="line">  <span class="comment">// `p4`更快，所以拒绝</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h4><blockquote>
<p><code>Promise.reject(reason)</code>方法返回一个由给定原因拒绝的Promise对象</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'fail'</span>)).then(err = &#123;</div><div class="line">  <span class="comment">// not called</span></div><div class="line">&#125;, err =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(err) <span class="comment">// Error: fail</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="Promise-resolve-value"><a href="#Promise-resolve-value" class="headerlink" title="Promise.resolve(value)"></a>Promise.resolve(value)</h4><blockquote>
<p>返回使用给定值解析的<code>Promise</code>对象。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用静态`Promise.resolve`方法</span></div><div class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'success'</span>).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(val)</div><div class="line">&#125;, reason =&gt; &#123;</div><div class="line">  <span class="comment">// not called</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 解决数组</span></div><div class="line"><span class="built_in">Promise</span>.resolve([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(val[<span class="number">1</span>]) <span class="comment">// 2</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 解决另一个`Promise`</span></div><div class="line"><span class="keyword">let</span> original = <span class="built_in">Promise</span>.resolve(<span class="literal">true</span>)</div><div class="line"><span class="built_in">Promise</span>.resolve(original).then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v)) <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 解决可疑和抛出错误</span></div><div class="line"><span class="comment">/// 对象</span></div><div class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(&#123;</div><div class="line">  <span class="attr">then</span>: <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> resolve(<span class="string">'fulfilled!'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) <span class="comment">// true</span></div><div class="line">p1.then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(v) <span class="comment">// fulfilled!</span></div><div class="line">&#125;, e =&gt; &#123;</div><div class="line">  <span class="comment">// not called</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 回调之前抛出</span></div><div class="line"><span class="keyword">let</span> thenable = &#123;</div><div class="line">  <span class="attr">then</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Throwing'</span>)</div><div class="line">    resolve(<span class="string">'Resloving'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">Promise</span>.resolve(thenable).then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// not called</span></div><div class="line">&#125;, e =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(e) <span class="comment">// TypeError: Throwing</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 回调之后抛出</span></div><div class="line"><span class="keyword">let</span> thenable = &#123;</div><div class="line">  <span class="attr">then</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">    resolve(<span class="string">'Resolving'</span>)</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Throwing'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">Promise</span>.resolve(thenable).then(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(v) <span class="comment">// Resolving</span></div><div class="line">&#125;, e =&gt; &#123;</div><div class="line">  <span class="comment">// not called</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt;对象用于异步计算。承诺是&lt;code&gt;Promise&lt;/code&gt;创建时不一定知道的值的代理，它允许你将处理程序与异步操作的最终成功的值或失败的原因相关联。异步方法返回一个承诺，以在将来的某个时间提供该值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/es6/es6-promise.png&quot; alt=&quot;Promise&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pending：&lt;/strong&gt; 初始状态，未履行或拒绝&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fulfilled：&lt;/strong&gt; 操作成功完成&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rejected：&lt;/strong&gt; 操作失败&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="js" scheme="https://lencx.github.io/blog/categories/js/"/>
    
    
      <category term="ES6" scheme="https://lencx.github.io/blog/tags/ES6/"/>
    
      <category term="Promise" scheme="https://lencx.github.io/blog/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>ES6 - Destructuring</title>
    <link href="https://lencx.github.io/blog/2017/04/01/es6-destructuring/"/>
    <id>https://lencx.github.io/blog/2017/04/01/es6-destructuring/</id>
    <published>2017-04-01T09:44:42.000Z</published>
    <updated>2017-04-02T17:00:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h2><blockquote>
<p>解构赋值语法可以将数组或对象中的数据提取到不同的变量中</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'len'</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">24</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> &#123;age&#125; = person</div><div class="line"><span class="built_in">console</span>.log(age) <span class="comment">// 24</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> number = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="keyword">let</span> [first, second, , fourth] = number</div><div class="line"><span class="built_in">console</span>.log(first, second, fourth) <span class="comment">// 1 2 4</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [a, b, ...theRest] = number</div><div class="line"><span class="built_in">console</span>.log(a, b, theRest) <span class="comment">// 1 2 [3, 4]</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Array-destructuring"><a href="#Array-destructuring" class="headerlink" title="Array destructuring"></a>Array destructuring</h3><blockquote>
<blockquote>
<p>数组解构</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"><span class="keyword">let</span> [one, two, three] = foo</div><div class="line"><span class="built_in">console</span>.log(one, two, three) <span class="comment">// 'a' 'b' 'c'</span></div><div class="line"></div><div class="line"><span class="comment">// 赋值与声明分离</span></div><div class="line"><span class="keyword">let</span> a, b</div><div class="line">[a, b] = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// 1 2</span></div><div class="line"></div><div class="line"><span class="comment">// 默认值</span></div><div class="line"><span class="keyword">let</span> a, b, c</div><div class="line">[a = <span class="number">3</span>, b = <span class="number">5</span>, c] = [<span class="number">8</span>]</div><div class="line"><span class="built_in">console</span>.log(a, b, c) <span class="comment">// 8 5 undefined</span></div><div class="line"></div><div class="line"><span class="comment">// 交换变量</span></div><div class="line"><span class="keyword">let</span> x = <span class="number">3</span></div><div class="line"><span class="keyword">let</span> y = <span class="number">5</span></div><div class="line">;[x, y] = [y, x]</div><div class="line"><span class="built_in">console</span>.log(x, y) <span class="comment">// 5 3</span></div><div class="line"></div><div class="line"><span class="comment">// 解构从函数返回的数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [<span class="number">3</span>, <span class="number">5</span>]</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a, b</div><div class="line">[a, b] = foo()</div><div class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// 3 5</span></div><div class="line"></div><div class="line"><span class="comment">// 忽略一些返回值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>]</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> [a, , b] = bar()</div><div class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// 1 7</span></div><div class="line"><span class="comment">/// 全部忽略</span></div><div class="line">[,,] = bar()</div><div class="line"></div><div class="line"><span class="comment">// 将`rest`数组分配到一个变量</span></div><div class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// [5, 7, 8]</span></div><div class="line"><span class="comment">/// b后加一个逗号会报错，`rest`必须为最后一个参数</span></div><div class="line"><span class="keyword">var</span> [a, ...b,] = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>]; <span class="comment">// SyntaxError: Rest element must be last element in array</span></div><div class="line"></div><div class="line"><span class="comment">// 从正则表达式匹配中抽取值</span></div><div class="line"><span class="keyword">let</span> url = <span class="string">'https://lencx.github.io/blog/tags/'</span></div><div class="line"><span class="keyword">let</span> _url = <span class="regexp">/^(\w+)\:\/\/([^\/]+)\/(.*)$/</span>.exec(url)</div><div class="line"><span class="built_in">console</span>.log(_url) <span class="comment">// ["https://lencx.github.io/blog/tags/", "https", "lencx.github.io", "blog/tags/", index: 0, input: "https://lencx.github.io/blog/tags/"]</span></div><div class="line"><span class="keyword">let</span> [, protocol, fullhost, fullpath] = _url</div><div class="line"><span class="built_in">console</span>.log(protocol) <span class="comment">// https</span></div><div class="line"><span class="built_in">console</span>.log(fullhost) <span class="comment">// lencx.github.io</span></div><div class="line"><span class="built_in">console</span>.log(fullpath) <span class="comment">// blog/tags/</span></div></pre></td></tr></table></figure>
<h2 id="Object-destructuring"><a href="#Object-destructuring" class="headerlink" title="Object destructuring"></a>Object destructuring</h2><blockquote>
<blockquote>
<p>对象解构</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="string">'abc'</span>&#125;</div><div class="line"><span class="keyword">let</span> &#123;a, b&#125; = obj</div><div class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// 3 "abc"</span></div><div class="line"></div><div class="line"><span class="comment">// 对象解构赋值与声明分离</span></div><div class="line"><span class="keyword">let</span> a, b</div><div class="line">(&#123;a, b&#125; = &#123;<span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">5</span>&#125;) <span class="comment">// Object &#123;a: 2, b: 5&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 重新分配变量名</span></div><div class="line"><span class="keyword">let</span> rename = &#123;<span class="attr">a</span>: <span class="number">7</span>, <span class="attr">b</span>: <span class="string">'asd'</span>&#125;</div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>: num, <span class="attr">b</span>: str&#125; = rename</div><div class="line"><span class="built_in">console</span>.log(num) <span class="comment">// 7</span></div><div class="line"><span class="built_in">console</span>.log(str) <span class="comment">// "asd"</span></div><div class="line"></div><div class="line"><span class="comment">// 默认值</span></div><div class="line"><span class="keyword">let</span> &#123;a = <span class="number">2</span>, b = <span class="number">4</span>&#125; = &#123;<span class="attr">a</span>: <span class="number">6</span>&#125;</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 4</span></div><div class="line"></div><div class="line"><span class="comment">// ES5 设置函数参数的默认值</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defVal</span>(<span class="params">option</span>) </span>&#123;</div><div class="line">  option = option === <span class="literal">undefined</span> ? &#123;&#125; : option</div><div class="line">  <span class="keyword">let</span> color = option.color === <span class="literal">undefined</span> ? <span class="string">'#fff'</span> : option.color</div><div class="line">  <span class="keyword">let</span> background = option.background === <span class="literal">undefined</span> ? <span class="string">'red'</span> : option.background</div><div class="line">  <span class="keyword">let</span> xy = option.xy === <span class="literal">undefined</span> ? &#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">10</span>&#125; : option.xy</div><div class="line">  <span class="built_in">console</span>.log(color, background, xy)</div><div class="line">&#125;</div><div class="line">defVal(&#123;</div><div class="line">  <span class="attr">color</span>: <span class="string">'yellow'</span>,</div><div class="line">  <span class="attr">xy</span>: &#123;<span class="attr">x</span>: <span class="number">20</span>, <span class="attr">y</span>: <span class="number">15</span>&#125;</div><div class="line">&#125;) <span class="comment">// yellow red Object &#123;x: 20, y: 15&#125;</span></div><div class="line"><span class="comment">// ES2015</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defVal</span>(<span class="params">&#123;color=<span class="string">'#fff'</span>, background=<span class="string">'red'</span>, xy=&#123;x:<span class="number">10</span>, y:<span class="number">10</span>&#125;&#125;</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(color, background, xy)</div><div class="line">&#125;</div><div class="line">defVal(&#123;</div><div class="line">  <span class="attr">color</span>: <span class="string">'yellow'</span>,</div><div class="line">  <span class="attr">xy</span>: &#123;<span class="attr">x</span>: <span class="number">20</span>, <span class="attr">y</span>: <span class="number">15</span>&#125;</div><div class="line">&#125;) <span class="comment">// yellow red Object &#123;x: 20, y: 15&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 嵌套对象和数组解构</span></div><div class="line"><span class="keyword">let</span> post = &#123;</div><div class="line">  <span class="attr">title</span>: <span class="string">'ES6 - Destructuring'</span>,</div><div class="line">  <span class="attr">meta</span>: [&#123;</div><div class="line">    <span class="attr">author</span>: <span class="string">'len'</span>,</div><div class="line">    <span class="attr">date</span>: <span class="string">'2017-04-01'</span>,</div><div class="line">    <span class="attr">tag</span>: <span class="string">'es6'</span></div><div class="line">  &#125;]</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> &#123;title, <span class="attr">meta</span>: [&#123;author, date, <span class="attr">tag</span>: metaTag&#125;]&#125; = post</div><div class="line"><span class="built_in">console</span>.log(title) <span class="comment">// ES6 - Destructuring</span></div><div class="line"><span class="built_in">console</span>.log(author) <span class="comment">// len</span></div><div class="line"><span class="built_in">console</span>.log(date) <span class="comment">// 2017-04-01</span></div><div class="line"><span class="built_in">console</span>.log(metaTag) <span class="comment">// es6</span></div><div class="line"></div><div class="line"><span class="comment">// 迭代和解构</span></div><div class="line"><span class="keyword">let</span> posts = [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">title</span>: <span class="string">'Git Basics'</span>,</div><div class="line">    <span class="attr">meta</span>: &#123;</div><div class="line">      <span class="attr">date</span>: <span class="string">'2017-03-20'</span>,</div><div class="line">      <span class="attr">tag</span>: <span class="string">'git'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">title</span>: <span class="string">'Hexo-theme-lencx'</span>,</div><div class="line">    <span class="attr">meta</span>: &#123;</div><div class="line">      <span class="attr">date</span>: <span class="string">'2017-03-10'</span>,</div><div class="line">      <span class="attr">tag</span>: <span class="string">'hexo'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">title</span>: <span class="string">'CSS clearfix'</span>,</div><div class="line">    <span class="attr">meta</span>: &#123;</div><div class="line">      <span class="attr">date</span>: <span class="string">'2016-05-20'</span>,</div><div class="line">      <span class="attr">tag</span>: <span class="string">'css'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">]</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> &#123;<span class="attr">title</span>: t, <span class="attr">meta</span>: &#123;<span class="attr">date</span>: d&#125;&#125; <span class="keyword">of</span> posts) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`title: <span class="subst">$&#123;t&#125;</span>, date: <span class="subst">$&#123;d&#125;</span>`</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// title: Git Basics, date: 2017-03-20</span></div><div class="line"><span class="comment">// title: Hexo-theme-lencx, date: 2017-03-10</span></div><div class="line"><span class="comment">// title: CSS clearfix, date: 2016-05-20</span></div><div class="line"></div><div class="line"><span class="comment">// 从作为函数参数传递的对象中拉出字段</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">postTitle</span>(<span class="params">&#123;title&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> title</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">authorIs</span>(<span class="params">&#123;title, meta: &#123;author: a&#125;&#125;</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;title&#125;</span>: author is <span class="subst">$&#123;a&#125;</span>`</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> post = &#123;</div><div class="line">  <span class="attr">title</span>: <span class="string">'test post'</span>,</div><div class="line">  <span class="attr">meta</span>: &#123;</div><div class="line">    <span class="attr">author</span>: <span class="string">'lencx'</span>,</div><div class="line">    <span class="attr">date</span>: <span class="string">'2017-04'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`post title is <span class="subst">$&#123;postTitle(post)&#125;</span>`</span>) <span class="comment">// post title is test post</span></div><div class="line">authorIs(post) <span class="comment">// test post: author is lencx</span></div><div class="line"></div><div class="line"><span class="comment">// 计算对象属性名称和解构</span></div><div class="line"><span class="keyword">let</span> key = <span class="string">'a'</span></div><div class="line"><span class="keyword">let</span> &#123;[key]: foo&#125; = &#123;<span class="attr">a</span>: <span class="string">'bar'</span>&#125;</div><div class="line"><span class="built_in">console</span>.log(foo) <span class="comment">// bar</span></div></pre></td></tr></table></figure>
<p><strong>注：</strong> 在使用对象字面解构赋值而不用声明的情况下，赋值语句中的<code>()</code>是必须语法。直接使用{a, b} = {a: 2, b: 5}不是有效的独立语法，会抛出错误。因为左侧的{a, b}会被认为是块而不是对象字面值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Destructuring&quot;&gt;&lt;a href=&quot;#Destructuring&quot; class=&quot;headerlink&quot; title=&quot;Destructuring&quot;&gt;&lt;/a&gt;Destructuring&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;解构赋值语法可以将数组或对象中的数据提取到不同的变量中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; person = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;len&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &amp;#123;age&amp;#125; = person&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(age) &lt;span class=&quot;comment&quot;&gt;// 24&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; number = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [first, second, , fourth] = number&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(first, second, fourth) &lt;span class=&quot;comment&quot;&gt;// 1 2 4&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [a, b, ...theRest] = number&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a, b, theRest) &lt;span class=&quot;comment&quot;&gt;// 1 2 [3, 4]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="js" scheme="https://lencx.github.io/blog/categories/js/"/>
    
    
      <category term="ES6" scheme="https://lencx.github.io/blog/tags/ES6/"/>
    
      <category term="Destructuring" scheme="https://lencx.github.io/blog/tags/Destructuring/"/>
    
  </entry>
  
  <entry>
    <title>ES6 - Arrow Function</title>
    <link href="https://lencx.github.io/blog/2017/03/31/es6-arrow-function/"/>
    <id>https://lencx.github.io/blog/2017/03/31/es6-arrow-function/</id>
    <published>2017-03-31T11:37:55.000Z</published>
    <updated>2017-04-01T09:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Arrow-function"><a href="#Arrow-function" class="headerlink" title="Arrow function"></a>Arrow function</h2><blockquote>
<p>箭头函数表达式具有比函数表达式更短的语法，并且不绑定其自身的<code>this</code>，<code>arguments</code>，<code>super</code>或<code>new.target</code>。箭头函数表达式最适合于非方法函数，它们不能用于构造函数。</p>
</blockquote>
<h3 id="Shorter-functions"><a href="#Shorter-functions" class="headerlink" title="Shorter functions"></a>Shorter functions</h3><blockquote>
<blockquote>
<p>函数较短</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="comment">// 常规写法</span></div><div class="line">numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(n * <span class="number">2</span>)</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 箭头函数</span></div><div class="line">numbers.forEach(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">console</span>.log(n * <span class="number">2</span>))</div><div class="line"></div><div class="line"><span class="comment">// 当只有一个参数时，圆括号可省略，只有一条执行语句时，花括号也可省略</span></div><div class="line"><span class="keyword">let</span> a = <span class="function"><span class="params">i</span> =&gt;</span> i</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">let</span> a = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> i</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当无参数或有多个参数时，就用圆括号代表参数部分</span></div><div class="line"><span class="keyword">let</span> b = <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">123</span></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">let</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">123</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"><span class="comment">// 当有多条执行语句时，则需使用花括号括起来</span></div><div class="line"><span class="keyword">let</span> c = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> m = a + b</div><div class="line">  <span class="built_in">console</span>.log(m)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 由于花括号会被解释为代码块，所以如果箭头函数直接返回一个对象，则必须在对象外加一个括号，否则会报错</span></div><div class="line"><span class="keyword">let</span> obj = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;<span class="attr">name</span>: name, <span class="attr">age</span>: age&#125; <span class="comment">// SyntaxError: Unexpected token :</span></div><div class="line"><span class="comment">// 正确写法为</span></div><div class="line"><span class="keyword">let</span> obj = <span class="function">(<span class="params">name, age</span>) =&gt;</span> (&#123;<span class="attr">name</span>: name, <span class="attr">age</span>: age&#125;)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="No-binding-of-this"><a href="#No-binding-of-this" class="headerlink" title="No binding of this"></a>No binding of this</h3><blockquote>
<blockquote>
<p>不绑定<code>this</code>: 函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 构造函数将`this`定义为自身的一个实例</span></div><div class="line">  <span class="keyword">this</span>.age = <span class="number">0</span></div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span> <span class="title">growUp</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// console.log(this === window) // true</span></div><div class="line">    <span class="comment">// 此处的`this`指向`window`</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age++) <span class="comment">// NaN</span></div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> Person()</div><div class="line"></div><div class="line"><span class="comment">// 将`this`赋值给其他变量可解决该问题</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.age = <span class="number">0</span></div><div class="line">  <span class="keyword">let</span> that = <span class="keyword">this</span></div><div class="line">  setInterval(<span class="function"><span class="keyword">function</span> <span class="title">growUp</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(that.age++) <span class="comment">// 0, 1, 2, ...</span></div><div class="line">  &#125;, <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> Person()</div><div class="line"></div><div class="line"><span class="comment">// 使用箭头函数可以优雅的解决该问题</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.age = <span class="number">0</span></div><div class="line">  <span class="comment">// 0, 1, 2, ...</span></div><div class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.age++), <span class="number">1000</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> Person()</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'len'</span>,</div><div class="line">  <span class="attr">say</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">person.say() <span class="comment">// len</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'len'</span>,</div><div class="line">  <span class="attr">say</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">person.say() <span class="comment">// 值为空，访问不到</span></div><div class="line"></div><div class="line"><span class="comment">// 正确写法为</span></div><div class="line"><span class="keyword">let</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'len'</span>,</div><div class="line">  say() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">person.say() <span class="comment">// len</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Len'</span>,</div><div class="line">  <span class="attr">hobbies</span>: [<span class="string">'Computers'</span>, <span class="string">'Music'</span>, <span class="string">'Art'</span>],</div><div class="line">  <span class="attr">showHobbies</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.hobbies.map(<span class="function"><span class="keyword">function</span>(<span class="params">hobby</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> likes <span class="subst">$&#123;hobby&#125;</span>`</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">person.showHobbies()</div><div class="line"><span class="comment">// Len likes Computers</span></div><div class="line"><span class="comment">// Len likes Music</span></div><div class="line"><span class="comment">// Len likes Art</span></div><div class="line"></div><div class="line"><span class="comment">// 或者</span></div><div class="line"><span class="keyword">let</span> person = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Len'</span>,</div><div class="line">  <span class="attr">hobbies</span>: [<span class="string">'Computers'</span>, <span class="string">'Music'</span>, <span class="string">'Art'</span>],</div><div class="line">  showHobbies() &#123;</div><div class="line">    <span class="keyword">this</span>.hobbies.map(<span class="function"><span class="params">hobby</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> likes <span class="subst">$&#123;hobby&#125;</span>`</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">person.showHobbies()</div></pre></td></tr></table></figure>
<h3 id="No-binding-of-arguments"><a href="#No-binding-of-arguments" class="headerlink" title="No binding of arguments"></a>No binding of arguments</h3><blockquote>
<blockquote>
<p>不绑定参数：<code>arguments</code>对象在函数体内不存在</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用箭头函数，获取参数报错</span></div><div class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">foo(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="comment">// ReferenceError: arguments is not defined at foo</span></div><div class="line"></div><div class="line"><span class="comment">// 常规函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">&#125;</div><div class="line">bar(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>) <span class="comment">// [1, 2, 4]</span></div></pre></td></tr></table></figure>
<p><strong>⚠️ ：</strong>箭头函数没有自己的<code>arguments</code>对象，不过在大多数情况下，<code>rest</code>参数可以给出一个解决方案<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="built_in">console</span>.log(args)</div><div class="line">foo(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>) <span class="comment">// [1, 3, 5, 7]</span></div></pre></td></tr></table></figure></p>
<h4 id="Rest-parameters-apply"><a href="#Rest-parameters-apply" class="headerlink" title="Rest parameters apply"></a>Rest parameters apply</h4><blockquote>
<blockquote>
<p><code>rest</code>参数应用</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 求和</span></div><div class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.reduce.call(<span class="built_in">arguments</span>, (prev, curr) =&gt; prev + curr)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>)) <span class="comment">// 18</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev + curr)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>)) <span class="comment">// 18</span></div><div class="line"></div><div class="line"><span class="comment">// 乘法</span></div><div class="line"><span class="keyword">let</span> multiply = <span class="function">(<span class="params">mul, ...num</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> num.map(<span class="function"><span class="params">n</span> =&gt;</span> mul * n)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(multiply(<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>)) <span class="comment">// [6, 12, 15, 21]</span></div><div class="line"></div><div class="line"><span class="comment">// 取最大值</span></div><div class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(<span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line"><span class="built_in">console</span>.log(max) <span class="comment">// 7</span></div><div class="line"><span class="comment">// 直接使用变量，获取的值为`NaN`</span></div><div class="line"><span class="keyword">let</span> numbers = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>]</div><div class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(numbers)</div><div class="line"><span class="built_in">console</span>.log(max) <span class="comment">// NaN</span></div><div class="line"><span class="comment">// 解决办法</span></div><div class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, numbers)</div><div class="line"><span class="built_in">console</span>.log(max) <span class="comment">// 8</span></div><div class="line"><span class="comment">// 使用`rest`参数更简便</span></div><div class="line"><span class="keyword">let</span> numbers = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>]</div><div class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...numbers)</div><div class="line"><span class="built_in">console</span>.log(max) <span class="comment">// 8</span></div><div class="line"></div><div class="line"><span class="comment">// 数组的连接</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</div><div class="line"><span class="keyword">let</span> newArr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line"><span class="keyword">let</span> concatArr = newArr.concat(arr) <span class="comment">// [2, 4, 6, 8, 3, 5, 7, 9]</span></div><div class="line"><span class="comment">// 使用`rest`参数，直接在需要连接的数组后加入`rest`即可</span></div><div class="line"><span class="keyword">let</span> newArr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, ...arr]</div></pre></td></tr></table></figure>
<h3 id="Arrow-functions-used-as-methods"><a href="#Arrow-functions-used-as-methods" class="headerlink" title="Arrow functions used as methods"></a>Arrow functions used as methods</h3><blockquote>
<blockquote>
<p>箭头函数用作方法：箭头函数表达式最适合于非方法函数，当用作方法时会发生如下情况。</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  <span class="attr">x</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">a</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.x, <span class="keyword">this</span>),</div><div class="line">  <span class="attr">b</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x, <span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">obj.a() <span class="comment">// undefined | Window</span></div><div class="line">obj.b() <span class="comment">// 5 | Object &#123;...&#125;</span></div></pre></td></tr></table></figure>
<h3 id="Use-of-the-new-operator"><a href="#Use-of-the-new-operator" class="headerlink" title="Use of the new operator"></a>Use of the new operator</h3><blockquote>
<blockquote>
<p>不能用作构造函数，与<code>new</code>一起使用时会报错</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> Person = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</div><div class="line"><span class="keyword">new</span> Person() <span class="comment">// TypeError: Person is not a constructor at</span></div></pre></td></tr></table></figure>
<h3 id="Use-of-prototype-property"><a href="#Use-of-prototype-property" class="headerlink" title="Use of prototype property"></a>Use of prototype property</h3><blockquote>
<blockquote>
<p>箭头函数无原型属性</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(foo.prototype) <span class="comment">// undefined</span></div><div class="line"><span class="keyword">let</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="built_in">console</span>.log(bar.prototype) <span class="comment">// Object &#123;...&#125;</span></div></pre></td></tr></table></figure>
<h3 id="Use-of-the-yield-keyword"><a href="#Use-of-the-yield-keyword" class="headerlink" title="Use of the yield keyword"></a>Use of the yield keyword</h3><blockquote>
<blockquote>
<p><code>yield</code>关键字通常不能在箭头函数中使用（除非在其中嵌套的函数允许），因此，箭头函数不能用作<code>Generator</code>函数。</p>
</blockquote>
</blockquote>
<h2 id="Function-body"><a href="#Function-body" class="headerlink" title="Function body"></a>Function body</h2><h3 id="Returning-object-literals"><a href="#Returning-object-literals" class="headerlink" title="Returning object literals"></a>Returning object literals</h3><blockquote>
<blockquote>
<p>返回对象：在使用箭头函数直接返回对象时会报错，直接返回对象时需用圆括号括起来</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="attr">name</span>: <span class="string">'len'</span>, <span class="attr">age</span>: <span class="number">24</span>&#125; <span class="comment">// SyntaxError: Unexpected token :</span></div><div class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;<span class="attr">name</span>: <span class="string">'len'</span>, <span class="attr">age</span>: <span class="number">24</span>&#125;)</div></pre></td></tr></table></figure>
<h3 id="Line-breaks"><a href="#Line-breaks" class="headerlink" title="Line breaks"></a>Line breaks</h3><blockquote>
<blockquote>
<p>换行会报错</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">()</span></span></div><div class="line">  =&gt; <span class="number">1</span> <span class="comment">// SyntaxError: Unexpected token =&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Parsing-order"><a href="#Parsing-order" class="headerlink" title="Parsing order"></a>Parsing order</h3><blockquote>
<blockquote>
<p>解析顺序</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a, b, c</div><div class="line">a = a || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// ok</span></div><div class="line">b = b || <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125; <span class="comment">// SyntaxError: invalid arrow-function arguments</span></div><div class="line">c = c || <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;&#125;) <span class="comment">// ok</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Arrow-function&quot;&gt;&lt;a href=&quot;#Arrow-function&quot; class=&quot;headerlink&quot; title=&quot;Arrow function&quot;&gt;&lt;/a&gt;Arrow function&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;箭头函数表达式具有比函数表达式更短的语法，并且不绑定其自身的&lt;code&gt;this&lt;/code&gt;，&lt;code&gt;arguments&lt;/code&gt;，&lt;code&gt;super&lt;/code&gt;或&lt;code&gt;new.target&lt;/code&gt;。箭头函数表达式最适合于非方法函数，它们不能用于构造函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Shorter-functions&quot;&gt;&lt;a href=&quot;#Shorter-functions&quot; class=&quot;headerlink&quot; title=&quot;Shorter functions&quot;&gt;&lt;/a&gt;Shorter functions&lt;/h3&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;函数较短&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; numbers = [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 常规写法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;numbers.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(n * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 箭头函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;numbers.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(n * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 当只有一个参数时，圆括号可省略，只有一条执行语句时，花括号也可省略&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等同于&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 当无参数或有多个参数时，就用圆括号代表参数部分&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等同于&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sum = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; a + b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 等同于&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 当有多条执行语句时，则需使用花括号括起来&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; c = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; m = a + b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(m)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 由于花括号会被解释为代码块，所以如果箭头函数直接返回一个对象，则必须在对象外加一个括号，否则会报错&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: name, &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: age&amp;#125; &lt;span class=&quot;comment&quot;&gt;// SyntaxError: Unexpected token :&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 正确写法为&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (&amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: name, &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: age&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="js" scheme="https://lencx.github.io/blog/categories/js/"/>
    
    
      <category term="ES6" scheme="https://lencx.github.io/blog/tags/ES6/"/>
    
      <category term="function" scheme="https://lencx.github.io/blog/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>ES6 - Variable and Template Literals</title>
    <link href="https://lencx.github.io/blog/2017/03/30/es6-variable/"/>
    <id>https://lencx.github.io/blog/2017/03/30/es6-variable/</id>
    <published>2017-03-30T15:02:47.000Z</published>
    <updated>2017-03-31T16:42:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><blockquote>
<p>let：声明块范围内的局部变量<br>var：关键字声明的为全局变量，或者与整个函数本地定义，而与块范围无关</p>
<blockquote>
<p>在ES5中只有全局作用域和函数作用域，而没有块级作用域，而<code>let</code>的特性则为<code>JavaScript</code>提供了块级作用域的功能，避免了变量泄漏。</p>
</blockquote>
</blockquote>
<h3 id="Scoping-rules"><a href="#Scoping-rules" class="headerlink" title="Scoping rules"></a>Scoping rules</h3><blockquote>
<blockquote>
<p>范围界定规则</p>
</blockquote>
</blockquote>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// var</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'outside loop:'</span>, i) <span class="comment">// outside loop: 5</span></div><div class="line"></div><div class="line"><span class="comment">// let</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'outside loop:'</span>, i) <span class="comment">// ReferenceError: i is not defined</span></div><div class="line"></div><div class="line"><span class="comment">// let声明的变量在代码块外显示未定义</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span></div><div class="line">  <span class="keyword">let</span> b = <span class="number">2</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// ReferenceError: b is not defined</span></div><div class="line"></div><div class="line"><span class="comment">// 在程序和函数的顶层，let与var不同，不会在全局对象上创建一个属性</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">10</span></div><div class="line"><span class="keyword">let</span> y = <span class="number">10</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.x) <span class="comment">// 10 // this =&gt; window</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.y) <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>在<code>for</code>循环中的用<code>var</code>声明的<code>i</code>变量在循环结束本该被销毁，但之后仍可被访问。替换为<code>let</code>时则会报错。在同一个代码块中同时声明<code>a</code>, <code>b</code>两个变量，在代码块外部<code>a</code>可以正常访问，用<code>let</code>声明<code>b</code>变量会报错。由此可以看出<code>var</code>声明的变量为全局变量，而<code>let</code>声明的变量只在所属的代码块内有效，只在本代码块之内有效，则说明<code>let</code>声明变量的代码块就是一个块级作用域。</p>
<h3 id="Cleaner-code-in-inner-functions"><a href="#Cleaner-code-in-inner-functions" class="headerlink" title="Cleaner code in inner functions"></a>Cleaner code in inner functions</h3><blockquote>
<blockquote>
<p>在函数内部清洁代码</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> body = <span class="built_in">document</span>.body</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</div><div class="line">  btn.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">`button <span class="subst">$&#123;i&#125;</span>`</span>))</div><div class="line">  btn.onclick = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`button <span class="subst">$&#123;i&#125;</span> is clicked!`</span>)</div><div class="line">  &#125;</div><div class="line">  body.appendChild(btn)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 实现与let一样的功能，则必须创建一个不同的上下文，然后通过闭包来保存值</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</div><div class="line">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>)</div><div class="line">  btn.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">`button <span class="subst">$&#123;i&#125;</span>`</span>))</div><div class="line">  ;(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">    btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`button <span class="subst">$&#123;i&#125;</span> is clicked!`</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)(i)</div><div class="line">  body.appendChild(btn)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>⚠️ ：上面的代码之所以能按照预期的方式进行工作，是因为内部函数（匿名）的五个实例引用了变量<code>i</code>的五个不同实例。如果将<code>let</code>替换为<code>var</code>，则将无法工作，所有的内部函数都将返回<code>i</code>的最终值<code>5</code>。</strong></p>
<h3 id="Emulating-private-members"><a href="#Emulating-private-members" class="headerlink" title="Emulating private members"></a>Emulating private members</h3><blockquote>
<blockquote>
<p>模拟私有成员：在处理构造函数时，可以通过使用闭包来使<code>let</code>语句来共享一个或多个私有成员。</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SomeConstructor</div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> privateScope = &#123;&#125;</div><div class="line">  SomeConstructor = <span class="function"><span class="keyword">function</span> <span class="title">someConstructor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.someProperty = <span class="string">'foo'</span></div><div class="line">    privateScope.hiddenProperty = <span class="string">'bar'</span></div><div class="line">  &#125;</div><div class="line">  SomeConstructor.prototype.showPublic = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.someProperty) <span class="comment">// foo</span></div><div class="line">  &#125;</div><div class="line">  SomeConstructor.prototype.showPrivate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(privateScope.hiddenProperty) <span class="comment">// bar</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SomeConstructor()</div><div class="line">instance.showPublic() <span class="comment">// foo</span></div><div class="line">instance.showPrivate() <span class="comment">// bar</span></div><div class="line"><span class="built_in">console</span>.log(privateScope.hiddenProperty) <span class="comment">// ReferenceError: privateScope is not defined</span></div></pre></td></tr></table></figure>
<p><strong>⚠️ ： </strong>这种技术只提供“静态”私有状态，<code>SomeConstructor</code>的所有实例都将共享相同的<code>privateScope</code>。</p>
<h3 id="Temporal-dead-zone-and-errors"><a href="#Temporal-dead-zone-and-errors" class="headerlink" title="Temporal dead zone and errors"></a>Temporal dead zone and errors</h3><blockquote>
<blockquote>
<p>暂时死区和错误</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 重复声明会报错</span></div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">let</span> a</div><div class="line">  <span class="keyword">let</span> a <span class="comment">// SyntaxError: Identifier 'a' has already been declared</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 声明的变量名与函数参数相同，会报错</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">ags</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> ags = <span class="number">1</span> <span class="comment">// SyntaxError: Identifier 'ags' has already been declared</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 在变量声明之前引用，会报错</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a)</div><div class="line">  <span class="keyword">let</span> a = <span class="number">1</span></div><div class="line">&#125;</div><div class="line">doSomething() <span class="comment">// ReferenceError: a is not defined</span></div></pre></td></tr></table></figure>
<h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span></div><div class="line"><span class="keyword">if</span>(a === <span class="number">1</span>) &#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">5</span></div><div class="line">  <span class="keyword">let</span> b = <span class="number">8</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'a:'</span>, a) <span class="comment">// a:5 // 范围是全局</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'b:'</span>, b) <span class="comment">// b:8 // 范围是在if块内</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a:'</span>, a) <span class="comment">// a:5</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'b:'</span>, b) <span class="comment">// b:2</span></div></pre></td></tr></table></figure>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><blockquote>
<p>常量：与<code>let</code>类似，也是块范围的，只是声明的变量值不能改变</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> API_KEY = <span class="string">'sahtkdfjkjehfudiurhtbnuwxm'</span></div><div class="line"><span class="built_in">console</span>.log(API_KEY) <span class="comment">// sahtkdfjkjehfudiurhtbnuwxm</span></div><div class="line">API_KEY = <span class="string">'I changed API_KEY !'</span></div><div class="line"><span class="built_in">console</span>.log(API_KEY) <span class="comment">// TypeError: Assignment to constant variable.</span></div><div class="line"></div><div class="line"><span class="comment">// 块范围</span></div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">const</span> a=<span class="number">10</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ReferenceError: a is not defined</span></div></pre></td></tr></table></figure>
<h2 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h2><blockquote>
<p>模板文字: 允许嵌入表达式的字符串文字，在ES5规范的先前版本中被称为<code>模板字符串</code>。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> Person = &#123;</div><div class="line">  <span class="attr">firstName</span>: <span class="string">'Len'</span>,</div><div class="line">  <span class="attr">lastName</span>: <span class="string">'C'</span>,</div><div class="line">  sayName() &#123;</div><div class="line">    <span class="comment">// return 'My name is ' + firstName + ' ' + lastName + '.'</span></div><div class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>.`</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> sayname = Person.sayName()</div><div class="line"><span class="built_in">console</span>.log(sayname) <span class="comment">// My name is Len C.</span></div></pre></td></tr></table></figure>
<h3 id="Multi-line-strings"><a href="#Multi-line-strings" class="headerlink" title="Multi-line strings"></a>Multi-line strings</h3><blockquote>
<blockquote>
<p>多行字符串：使用正常的字符串你需要加入<code>\n</code>才能进行换行，而使用 <strong>`</strong> <strong>`</strong> 你只需正常的进行换行即可。</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'string text line 1\n'</span> + <span class="string">'string text line 2'</span>)</div><div class="line"><span class="comment">// string text line 1</span></div><div class="line"><span class="comment">// string text line 2</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`string text line 3</span></div><div class="line">string text line 4</div><div class="line">`)</div></pre></td></tr></table></figure>
<h3 id="Expression-interpolation"><a href="#Expression-interpolation" class="headerlink" title="Expression interpolation"></a>Expression interpolation</h3><blockquote>
<blockquote>
<p>表达式插值</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">3</span></div><div class="line"><span class="keyword">let</span> b = <span class="number">4</span></div><div class="line"><span class="comment">// 在正常字符串中嵌入表达式</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a + b = '</span> + (a + b) + <span class="string">' \nand\na * b = '</span> + (a * b))</div><div class="line"><span class="comment">// a + b = 7 </span></div><div class="line"><span class="comment">// and</span></div><div class="line"><span class="comment">// a * b = 12</span></div><div class="line"><span class="comment">// 使用模板文字嵌入表达式</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`a + b = <span class="subst">$&#123;a + b&#125;</span></span></div><div class="line">and</div><div class="line">a * b = <span class="subst">$&#123;a * b&#125;</span>`)</div></pre></td></tr></table></figure>
<h3 id="Tagged-template-literals"><a href="#Tagged-template-literals" class="headerlink" title="Tagged template literals"></a>Tagged template literals</h3><blockquote>
<blockquote>
<p>标签模板</p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tpl</span>(<span class="params">string, ...keys</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...vals</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> dict = vals[vals.length - <span class="number">1</span>] || &#123;&#125;</div><div class="line">    <span class="keyword">let</span> result = [string[<span class="number">0</span>]]</div><div class="line">    keys.forEach(<span class="function">(<span class="params">key, i</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> val = <span class="built_in">Number</span>.isInteger(key) ? vals[key] : dict[key]</div><div class="line">      result.push(val, string[i+<span class="number">1</span>])</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> result.join(<span class="string">''</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> s1 = tpl<span class="string">`<span class="subst">$&#123;<span class="number">0</span>&#125;</span><span class="subst">$&#123;<span class="number">2</span>&#125;</span><span class="subst">$&#123;<span class="number">1</span>&#125;</span>`</span></div><div class="line"><span class="built_in">console</span>.log(s1(<span class="string">'l'</span>,<span class="string">'n'</span>,<span class="string">'e'</span>)) <span class="comment">// len</span></div><div class="line"><span class="keyword">let</span> s2 = tpl<span class="string">`<span class="subst">$&#123;<span class="number">0</span>&#125;</span><span class="subst">$&#123;<span class="string">'name'</span>&#125;</span>`</span></div><div class="line"><span class="built_in">console</span>.log(s2(<span class="string">'hello,'</span>, &#123;<span class="attr">name</span>: <span class="string">'len'</span>&#125;)) <span class="comment">// hello,len</span></div><div class="line"></div><div class="line"><span class="comment">// alert(1)</span></div><div class="line">alert<span class="string">`1`</span></div></pre></td></tr></table></figure>
<h3 id="Raw-string"><a href="#Raw-string" class="headerlink" title="Raw string"></a>Raw string</h3><blockquote>
<blockquote>
<p>原始字符串：标签模板文字的第一个函数参数可用的特殊属性允许你在输入时访问原始字符串，而无需处理转义序列。<code>String.raw</code><br><img src="/blog/images/es6/es6-raw.png" alt="ES6 raw string"></p>
</blockquote>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> str.raw[<span class="number">0</span>]</div><div class="line">&#125;</div><div class="line"><span class="comment">// String.raw`123\nabc`</span></div><div class="line">tag<span class="string">`123\nabc`</span> <span class="comment">// 123\nabc</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;let：声明块范围内的局部变量&lt;br&gt;var：关键字声明的为全局变量，或者与整个函数本地定义，而与块范围无关&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在ES5中只有全局作用域和函数作用域，而没有块级作用域，而&lt;code&gt;let&lt;/code&gt;的特性则为&lt;code&gt;JavaScript&lt;/code&gt;提供了块级作用域的功能，避免了变量泄漏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Scoping-rules&quot;&gt;&lt;a href=&quot;#Scoping-rules&quot; class=&quot;headerlink&quot; title=&quot;Scoping rules&quot;&gt;&lt;/a&gt;Scoping rules&lt;/h3&gt;&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;范围界定规则&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="js" scheme="https://lencx.github.io/blog/categories/js/"/>
    
    
      <category term="ES6" scheme="https://lencx.github.io/blog/tags/ES6/"/>
    
      <category term="variable" scheme="https://lencx.github.io/blog/tags/variable/"/>
    
  </entry>
  
  <entry>
    <title>JS Console</title>
    <link href="https://lencx.github.io/blog/2017/03/25/js-console/"/>
    <id>https://lencx.github.io/blog/2017/03/25/js-console/</id>
    <published>2017-03-25T05:27:58.000Z</published>
    <updated>2017-03-31T10:25:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="log-info"><a href="#log-info" class="headerlink" title="log(), info()"></a>log(), info()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>)</div><div class="line"><span class="comment">// 可接受多个参数</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><table>
<thead>
<tr>
<th>占位符</th>
<th>符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>字符</td>
<td>%s</td>
</tr>
<tr>
<td>CSS</td>
<td>%c</td>
</tr>
<tr>
<td>整数</td>
<td>%d / %i</td>
</tr>
<tr>
<td>浮点数</td>
<td>%f</td>
</tr>
<tr>
<td>对象</td>
<td>%o</td>
</tr>
</tbody>
</table>
<p><strong>⚠️：不同格式数据必须使用对应格式的占位符</strong></p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// %s</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'%s + %s = %s'</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>) <span class="comment">// 2 + 3 = 6</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'%s is red'</span>, <span class="string">'#f00'</span>) <span class="comment">// #f00 is red</span></div><div class="line"><span class="comment">// %c</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'%chello, world'</span>, <span class="string">'color:blue;background:yellow;font-size:36px;'</span>)</div></pre></td></tr></table></figure>
<p><img src="/blog/images/js/console-css.png" alt="信息分组"></p>
<hr>
<h2 id="group"><a href="#group" class="headerlink" title="group()"></a>group()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.group();</div></pre></td></tr></table></figure>
<p><img src="/blog/images/js/console-group.png" alt="信息分组"></p>
<h2 id="warn-error"><a href="#warn-error" class="headerlink" title="warn(), error()"></a>warn(), error()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 警告</span></div><div class="line"><span class="built_in">console</span>.warn()</div><div class="line"><span class="comment">// 出错</span></div><div class="line"><span class="built_in">console</span>.error()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;log-info&quot;&gt;&lt;a href=&quot;#log-info&quot; class=&quot;headerlink&quot; title=&quot;log(), info()&quot;&gt;&lt;/a&gt;log(), info()&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 可接受多个参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;占位符&quot;&gt;&lt;a href=&quot;#占位符&quot; class=&quot;headerlink&quot; title=&quot;占位符&quot;&gt;&lt;/a&gt;占位符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;占位符&lt;/th&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;字符&lt;/td&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSS&lt;/td&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;整数&lt;/td&gt;
&lt;td&gt;%d / %i&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;浮点数&lt;/td&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;对象&lt;/td&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;⚠️：不同格式数据必须使用对应格式的占位符&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="https://lencx.github.io/blog/categories/js/"/>
    
    
      <category term="Tricks" scheme="https://lencx.github.io/blog/tags/Tricks/"/>
    
      <category term="console" scheme="https://lencx.github.io/blog/tags/console/"/>
    
  </entry>
  
  <entry>
    <title>Mac command</title>
    <link href="https://lencx.github.io/blog/2017/03/24/command/"/>
    <id>https://lencx.github.io/blog/2017/03/24/command/</id>
    <published>2017-03-24T15:30:19.000Z</published>
    <updated>2017-03-25T16:02:59.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd\ # 直接返回到用户根路径</span></div><div class="line"><span class="built_in">cd</span></div><div class="line"><span class="comment"># ls -a 查看隐藏文件</span></div><div class="line">ls</div><div class="line"><span class="comment"># 创建文件</span></div><div class="line">touch &lt;filename&gt;</div><div class="line"><span class="comment"># 删除文件</span></div><div class="line">rm -rf</div><div class="line"><span class="comment"># 重命名文件</span></div><div class="line">mv &lt;old filename&gt; &lt;new filename&gt;</div><div class="line"><span class="comment"># 文件追加内容</span></div><div class="line"><span class="comment"># echo "msg" &gt;&gt; &lt;filename&gt;</span></div><div class="line"><span class="built_in">echo</span></div><div class="line"><span class="comment"># used to format and display the man pages</span></div><div class="line">man</div><div class="line"><span class="comment"># 查看文件内容</span></div><div class="line">cat &lt;filename&gt;</div><div class="line"><span class="comment"># 列出mac下所有的shell类型</span></div><div class="line"><span class="comment">## /bin/bash /bin/csh /bin/ksh /bin/sh /bin/tcsh /bin/zsh</span></div><div class="line">ls /bin/*</div><div class="line"><span class="comment">## 当前使用的shell类型</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></div><div class="line"><span class="comment"># 选择shell类型</span></div><div class="line">chsh <span class="_">-s</span> /bin/zsh</div><div class="line">$(<span class="built_in">which</span> /bin/bash)</div><div class="line"><span class="comment"># 当前路径</span></div><div class="line"><span class="built_in">pwd</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
      <category term="bash" scheme="https://lencx.github.io/blog/categories/bash/"/>
    
    
      <category term="command" scheme="https://lencx.github.io/blog/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>Git Basics</title>
    <link href="https://lencx.github.io/blog/2017/03/24/git-basics/"/>
    <id>https://lencx.github.io/blog/2017/03/24/git-basics/</id>
    <published>2017-03-24T07:05:00.000Z</published>
    <updated>2017-03-31T10:27:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="File-status-lifecycle"><a href="#File-status-lifecycle" class="headerlink" title="File status lifecycle"></a>File status lifecycle</h2><blockquote>
<p>文件状态的生命周期<br><img src="/blog/images/git/git-file-status.png" alt="file status"></p>
</blockquote>
<a id="more"></a>
<h2 id="Basics-command"><a href="#Basics-command" class="headerlink" title="Basics command"></a>Basics command</h2><blockquote>
<p>基础命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Getting started</span></div><div class="line">git config --global user.name <span class="string">"your name"</span></div><div class="line">git config --global user.email <span class="string">"your@email"</span></div><div class="line"></div><div class="line"><span class="comment"># initializes a directory as a git repository</span></div><div class="line">git init</div><div class="line"><span class="comment"># view the status of your files in the working directory and staging area</span></div><div class="line">git status</div><div class="line"><span class="comment"># adds file contents to the staging area</span></div><div class="line"><span class="comment">## git add -A</span></div><div class="line"><span class="comment">## or </span></div><div class="line"><span class="comment">## git add .</span></div><div class="line">git add</div><div class="line"><span class="comment"># shows diff of what is staged and what is modified but unstaged</span></div><div class="line"><span class="comment">## git diff --staged # 查看暂存区变化</span></div><div class="line">git diff</div><div class="line"><span class="comment"># records a snapshot of the staging area</span></div><div class="line"><span class="comment"># git commit -m "msg"</span></div><div class="line">git commit</div><div class="line"><span class="comment"># add &amp; commit 合二为一， 前提是必须正常提交过一次才能使用</span></div><div class="line">git commit <span class="_">-a</span> -m <span class="string">"msg"</span></div><div class="line"><span class="comment"># remove files from the staging area</span></div><div class="line"><span class="comment">## git rm &lt;file name&gt; # 从暂存区将文件移除</span></div><div class="line">git rm</div><div class="line"><span class="comment"># git rm --cached orig; mv orig new; git add new</span></div><div class="line"><span class="comment">## git mv &lt;old filename&gt; &lt;new filename&gt; # staging area changed</span></div><div class="line">git mv</div><div class="line"><span class="comment"># show commit history of a branch</span></div><div class="line">git <span class="built_in">log</span></div></pre></td></tr></table></figure>
<h2 id="Working-with-remotes"><a href="#Working-with-remotes" class="headerlink" title="Working with remotes"></a>Working with remotes</h2><blockquote>
<p>远端</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># copy a git repository</span></div><div class="line">git <span class="built_in">clone</span> URL</div><div class="line"><span class="comment"># list, add and delete remote repository aliases</span></div><div class="line">git remote</div><div class="line"><span class="comment"># download new brabches and data from a remote repository</span></div><div class="line">git fetch</div><div class="line"><span class="comment"># merge a bash context into your current one</span></div><div class="line">git merge</div><div class="line"><span class="comment"># fetch from a remote repo and try to merge into the current branch</span></div><div class="line">git pull</div><div class="line"><span class="comment"># push your new branches and data to a remote repository</span></div><div class="line">git push</div></pre></td></tr></table></figure>
<h2 id="Taging"><a href="#Taging" class="headerlink" title="Taging"></a>Taging</h2><blockquote>
<p>标签</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># listing tags</span></div><div class="line">git tag</div><div class="line"><span class="comment"># create tag</span></div><div class="line">git tag <span class="_">-a</span> v1.0 -m <span class="string">"my version 1.0"</span></div><div class="line"><span class="comment"># showing tag data along with commit</span></div><div class="line">git show v1.0</div><div class="line"><span class="comment"># tagging later</span></div><div class="line">git tag <span class="_">-a</span> v0.9 -m <span class="string">"version 0.9"</span> [commit]</div><div class="line"><span class="comment"># sharing tags</span></div><div class="line">git push origin [tagname]</div><div class="line"><span class="comment"># If you have a lot of tags that you want to push up at once.</span></div><div class="line"><span class="comment"># 一次推送多个tag</span></div><div class="line">git push origin --tags</div><div class="line"><span class="comment"># delete local tag</span></div><div class="line">git tag <span class="_">-d</span> [tagname]</div><div class="line"><span class="comment"># delete origin tag</span></div><div class="line">git push origin :refs/tags/[tagname]</div></pre></td></tr></table></figure>
<h2 id="Git-configuration-file"><a href="#Git-configuration-file" class="headerlink" title="Git configuration file"></a>Git configuration file</h2><blockquote>
<p>git配置文件： <code>~/.gitconfig(or ~/.config/git/config)</code></p>
<ul>
<li>user[用户]</li>
<li>alias[别名]</li>
<li>core.editor[核心编辑器]</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[user]</div><div class="line">      name = Len</div><div class="line">      email = cxin1314@gmail.com</div><div class="line">[alias]</div><div class="line">      st = status</div><div class="line">      ci = commit</div><div class="line">      co = checkout</div><div class="line">      br = branch</div><div class="line">      df = diff</div><div class="line">      lg = log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit</div><div class="line">      last = log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit -1 HEAD</div><div class="line">[core]</div><div class="line">      editor = emacs</div></pre></td></tr></table></figure>
<h2 id="Snapshot"><a href="#Snapshot" class="headerlink" title="Snapshot"></a>Snapshot</h2><blockquote>
<p>git 是基于快照的，即文件改变，将该文件全部进行保存，<code>blob</code>改变，该文件所属的目录<code>tree</code>也改变<br>tree: 目录(dir)<br>blob: 文件(file)</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> .git/objects</div><div class="line">git cat-file -p &lt;SHA-1&gt;</div></pre></td></tr></table></figure>
<p><img src="/blog/images/git/git-hash-1.png" alt="git hash 1"><br><img src="/blog/images/git/git-hash-2.png" alt="git hash 2"><br><img src="/blog/images/git/git-hash-3.png" alt="git hash 3"><br><img src="/blog/images/git/git-hash-4.png" alt="git hash 4"></p>
<blockquote>
<p>从以上的操作可以总结出如下的结论：<br><img src="/blog/images/git/git-snapshot.png" alt="git snapshot"><br><img src="/blog/images/git/git-branch.png" alt="git branch"></p>
</blockquote>
<h2 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h2><blockquote>
<p>分支创建与删除<br>只需要将<code>master</code>文件中的内容重新复制到新文件中，即创建了一条新的分支，删除分支只需删除该文件即可。<br><img src="/blog/images/git/git-branch-2.png" alt="git branch"><br>分支切换原理：修改<code>HEAD</code>文件<br><img src="/blog/images/git/git-checkout-branch.png" alt="git branch checkout"><br><img src="/blog/images/git/git-branch-master.png" alt="git branch master"></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># list, create and delete branches</span></div><div class="line">git branch -</div><div class="line"><span class="comment">## delete branch</span></div><div class="line">git branch <span class="_">-d</span> [branchname]</div><div class="line"><span class="comment">## forced to delete</span></div><div class="line">git branch -D [branchname]</div><div class="line"></div><div class="line"><span class="comment"># switch to a new branch context</span></div><div class="line">git checkout -</div><div class="line"><span class="comment">## create and switch branch</span></div><div class="line">git checkout -b [branchname]</div><div class="line"><span class="comment"># tracking remote branches</span></div><div class="line">git checkout --track origin/serverfix</div><div class="line">git checkout -b sf origin/serverfix</div><div class="line"></div><div class="line"><span class="comment"># merge a branch context into your current one</span></div><div class="line">git merge</div><div class="line"><span class="comment"># fast-forward merge</span></div><div class="line"><span class="comment"># fix conflict</span></div><div class="line">git rebase master [branchname]</div><div class="line">git checkout master</div><div class="line">git merge [branchname]</div><div class="line">git branch --merged</div><div class="line">git branch --no-merged</div><div class="line">git rebase --continue</div><div class="line"><span class="comment"># apply the changes introduced by some existing commits</span></div><div class="line"><span class="comment">## git cherry-pick [commit]</span></div><div class="line">git cherry-pick -</div></pre></td></tr></table></figure>
<h2 id="Undoing-Things"><a href="#Undoing-Things" class="headerlink" title="Undoing Things"></a>Undoing Things</h2><blockquote>
<p>撤销<br><strong>⚠️： <code>git checkout --</code> is dangerous. May be <code>git stash</code> is better.</strong><br>$ git stash apply</p>
</blockquote>
<p><img src="/blog/images/git/git-undoing.png" alt="git undoing"></p>
<h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><blockquote>
<p>git 忽略文件及目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*~</div><div class="line">.DS_Store</div><div class="line">.idea</div><div class="line">.vscode</div><div class="line">/node_modules</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      git basics
    
    </summary>
    
      <category term="git" scheme="https://lencx.github.io/blog/categories/git/"/>
    
    
      <category term="command" scheme="https://lencx.github.io/blog/tags/command/"/>
    
      <category term="Tricks" scheme="https://lencx.github.io/blog/tags/Tricks/"/>
    
      <category term="git" scheme="https://lencx.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hexo常见问题汇总</title>
    <link href="https://lencx.github.io/blog/2017/03/22/hexo-post/"/>
    <id>https://lencx.github.io/blog/2017/03/22/hexo-post/</id>
    <published>2017-03-22T10:36:34.000Z</published>
    <updated>2017-03-31T10:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 创建一篇文章</span></div><div class="line"><span class="comment"># hexo new post &lt;your-post-title&gt;</span></div><div class="line">hexo new &lt;your-post-title&gt;</div><div class="line"><span class="comment"># 创建一个页面</span></div><div class="line">hexo new page &lt;your-page-name&gt;</div></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo init <span class="comment"># 初始化</span></div><div class="line">hexo clean <span class="comment"># 删除生成的文件和缓存</span></div><div class="line">hexo g <span class="comment"># 生成静态文件</span></div><div class="line">hexo s <span class="comment"># 启动服务，可以在本地预览</span></div><div class="line">hexo d <span class="comment"># 部署</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="git部署"><a href="#git部署" class="headerlink" title="git部署"></a>git部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 如果未安装hexo-deployer-git</span></div><div class="line">npm install hexo-deployer-git --save</div><div class="line"></div><div class="line"><span class="comment"># 从远端克隆 .deploy_git 目录</span></div><div class="line">git <span class="built_in">clone</span> &lt;gh-pages repo&gt; .deploy_git</div><div class="line"><span class="comment"># 删除 .deploy_git</span></div><div class="line">rm -rf .deploy_git</div></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> &lt;repository url<span class="string">&gt;</span></div><div class="line"><span class="attr">  branch:</span> [branch] <span class="comment">#master</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写作&quot;&gt;&lt;a href=&quot;#写作&quot; class=&quot;headerlink&quot; title=&quot;写作&quot;&gt;&lt;/a&gt;写作&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建一篇文章&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# hexo new post &amp;lt;your-post-title&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo new &amp;lt;your-post-title&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建一个页面&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo new page &amp;lt;your-page-name&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo init &lt;span class=&quot;comment&quot;&gt;# 初始化&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo clean &lt;span class=&quot;comment&quot;&gt;# 删除生成的文件和缓存&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo g &lt;span class=&quot;comment&quot;&gt;# 生成静态文件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo s &lt;span class=&quot;comment&quot;&gt;# 启动服务，可以在本地预览&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo d &lt;span class=&quot;comment&quot;&gt;# 部署&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://lencx.github.io/blog/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://lencx.github.io/blog/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo-theme-lencx</title>
    <link href="https://lencx.github.io/blog/2017/03/20/hexo-theme-lencx/"/>
    <id>https://lencx.github.io/blog/2017/03/20/hexo-theme-lencx/</id>
    <published>2017-03-20T01:42:15.000Z</published>
    <updated>2017-03-29T16:55:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote>
<p>描述</p>
<blockquote>
<p>本主题使用<code>pug[jade]</code>, <code>sass</code>编写，可用<a href="https://webpack.js.org/" target="_blank" rel="external">webpack</a>对<code>css</code>，<code>js</code>进行压缩。之所以选择<code>pug</code>是因为觉得这种模板语法很优雅（用缩进表示DOM结构，很简洁, 逻辑采用js的语法，作为前端表示无压力， <code>include</code>, <code>block</code>, <code>mixins</code> etc. 用起来也很方便。 具体语法可以参考<a href="https://pugjs.org/language/mixins.html" target="_blank" rel="external">Pug API</a>，<a href="http://sass-lang.com/" target="_blank" rel="external">Sass API</a>）。本主题支持响应式，未借助第三方库，如想使用栅格系统，在<code>／source/css/part/_grid.scss</code>中有一个简易版的bootstrap栅格,未build的scss源文件文件可参考<a href="https://github.com/lencx/bs-grid" target="_blank" rel="external">bs-grid</a>。或者使用<code>postcss</code>的插件库<code>lost</code>, <code>postcss-cssnext</code> etc. 进行编写。了解更多信息，请参考<a href="https://github.com/postcss/postcss" target="_blank" rel="external">postcss</a>。</p>
</blockquote>
</blockquote>
<a id="more"></a>
<h2 id="Install-plugins"><a href="#Install-plugins" class="headerlink" title="Install plugins"></a>Install plugins</h2><blockquote>
<p>使用本主题需要安装的依赖, 在根目录进行安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-renderer-pug hexo-renderer-sass --save</div></pre></td></tr></table></figure>
<h2 id="Create-categories-tags-and-about-page"><a href="#Create-categories-tags-and-about-page" class="headerlink" title="Create categories, tags and about page"></a>Create categories, tags and about page</h2><blockquote>
<p>创建分类页与标签页<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># categories页面</span></div><div class="line">hexo new page categories</div><div class="line"><span class="comment"># tags页面</span></div><div class="line">hexo new page tags</div><div class="line"><span class="comment"># about页面</span></div><div class="line">hexo new page about</div></pre></td></tr></table></figure></p>
<p><strong>⚠️ ：</strong> categories与tags页面创建后无需编辑</p>
</blockquote>
<h2 id="主题设置及特性（Theme-Setting-and-Features）"><a href="#主题设置及特性（Theme-Setting-and-Features）" class="headerlink" title="主题设置及特性（Theme Setting and Features）"></a>主题设置及特性（Theme Setting and Features）</h2><h3 id="Navigation-menu"><a href="#Navigation-menu" class="headerlink" title="Navigation(menu)"></a>Navigation(menu)</h3><blockquote>
<p>菜单</p>
<blockquote>
<ul>
<li>窗口宽度小于768px时，菜单折叠</li>
<li>当垂直滚动超过500px时，header会在一秒内消失。回滚时又在800ms内显示出来（呃，你若问我八百毫秒什么概念，我也不知道，自己滚滚就知道了。重在体验…😉 ）</li>
</ul>
</blockquote>
</blockquote>
<h3 id="Archives"><a href="#Archives" class="headerlink" title="Archives"></a>Archives</h3><blockquote>
<p>归档页</p>
<blockquote>
<p>点击年份可折叠, 月份左上角显示本月文章数量<br><strong>⚠️ ：</strong>比较重要的一条，想要实现我图中的一长条不间断的显示，而不产生分页。请将根目录中<code>_config.yml</code>的 <code>archive_generator: per_page</code>值设大一点，为了免去麻烦，省的哪天再超了，我一次性设置了10000，虽然我这辈子都写不出来这么多，哈哈，就是任性。你要是不想任性，可以先设个几百条。</p>
</blockquote>
</blockquote>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">archive_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">10000</span></div></pre></td></tr></table></figure>
<ol>
<li><p>关闭状态</p>
<ul>
<li><img src="/blog/images/hexo/hexo-archives-off.png" alt="archives off"></li>
</ul>
</li>
<li><p>打开状态</p>
<ul>
<li><img src="/blog/images/hexo/hexo-archives-on.png" alt="archives on"></li>
</ul>
</li>
</ol>
<h3 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h3><blockquote>
<p>分类页</p>
<blockquote>
<p>稀松平常，没啥好说的，本主题大量使用了文本阴影效果，不知会不会适得其反 🤔 。</p>
</blockquote>
</blockquote>
<ul>
<li><img src="/blog/images/hexo/hexo-categories.png" alt="categories"></li>
</ul>
<h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><blockquote>
<p>标签页</p>
<blockquote>
<p>偷偷告诉你，不光是这里的标签，在文章中的标签同样可以改变颜色， 角度啥的。（若不信，多刷新几次浏览器 😜 ）<br><strong>⚠️ ：</strong>这里同样有一个设置，不过不是针对<code>menu</code>中的tags设定的，而是从sidebar中的tagCloud点击跳转过来的当前tag的显示数量。值写小了，无外乎就是一个标签多分几页，看个人喜好，自行设定。此配置也是在根目录下的_config.yml文件中进行设置。</p>
</blockquote>
</blockquote>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">tag_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">20</span></div></pre></td></tr></table></figure>
<ul>
<li>random box shadow</li>
<li>random border-radius</li>
<li>random font color</li>
<li>random vertical position<ul>
<li>随机1<img src="/blog/images/hexo/hexo-tags-1.png" alt="tags 1"></li>
<li>随机2<img src="/blog/images/hexo/hexo-tags-2.png" alt="tags 2"></li>
</ul>
</li>
</ul>
<h3 id="Back-To-Top"><a href="#Back-To-Top" class="headerlink" title="Back To Top"></a>Back To Top</h3><blockquote>
<p>回到顶部按钮</p>
<ul>
<li>当垂直滚动超过300px时，按钮出现。小于300px消失</li>
</ul>
</blockquote>
<h3 id="Posts-List"><a href="#Posts-List" class="headerlink" title="Posts List"></a>Posts List</h3><blockquote>
<p>首页文章列表</p>
</blockquote>
<p>每页显示的文章数，需在根目录中的<code>/_config.yml</code>中进行设置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Pagination</span></div><div class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></div><div class="line"><span class="attr">per_page:</span> <span class="number">8</span></div></pre></td></tr></table></figure></p>
<h3 id="Sidebar"><a href="#Sidebar" class="headerlink" title="Sidebar"></a>Sidebar</h3><blockquote>
<p>侧栏</p>
<blockquote>
<p>窗口宽度小于992px，侧栏隐藏</p>
</blockquote>
</blockquote>
<p>与sidebar有关的配置项，文件路径<code>/theme/_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">sidebar:</span></div><div class="line"><span class="attr">  tagCloud:</span></div><div class="line">    <span class="comment"># 是否开启标签云</span></div><div class="line"><span class="attr">    enable:</span> <span class="literal">true</span></div><div class="line">    <span class="comment"># 是否开启背景（可用图片或直接设置背景色）</span></div><div class="line"><span class="attr">    bgEnable:</span> <span class="literal">true</span></div><div class="line">    <span class="comment"># bg: '#000'</span></div><div class="line">    <span class="comment"># '/blog' 是项目的根路径 默认跟路径是'／'，具体是啥请看根目录中_config.yml的root配置项</span></div><div class="line"><span class="attr">    bg:</span> url(<span class="string">'/blog/img/bg-1.png'</span>)</div><div class="line">  <span class="comment"># 是否开启归档</span></div><div class="line"><span class="attr">  archives:</span> <span class="literal">true</span></div><div class="line">  <span class="comment"># 是否开启分类</span></div><div class="line"><span class="attr">  categories:</span> <span class="literal">true</span></div><div class="line">  <span class="comment"># 最新文章</span></div><div class="line"><span class="attr">  recent_posts:</span></div><div class="line"><span class="attr">    enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启</span></div><div class="line"><span class="attr">    num:</span> <span class="number">5</span> <span class="comment"># 条数</span></div></pre></td></tr></table></figure>
<ol>
<li>Tags Cloud<ul>
<li>canvas<br><img src="/blog/images/hexo/hexo-sidebar-tagcloud.png" alt="sidebar tagCloud"></li>
<li>random font color<blockquote>
<p><strong>注：</strong>如需更改字体颜色，只能改源码了，我将随机色写入压缩后的js文件中，即<code>/theme/hexo-theme-lencx/libs/tagcanvas.min.js</code></p>
</blockquote>
</li>
<li>font family, background color, text shadow etc.<blockquote>
<p>可以在<code>/theme/hexo-theme-lencxs/libs/tagcloud.js</code>中更改</p>
</blockquote>
</li>
<li>当然没事也可以换换背景啥的，也是👌 的。</li>
</ul>
</li>
<li>Archives<ul>
<li>锚点<blockquote>
<p>点击某个月份链接跳转后定位到该月（该年份文章比较多时，此功能还比较实用 👍 ）</p>
</blockquote>
</li>
<li>点击年份可折叠<blockquote>
<p>一长坨看着就不舒服 ……^_^</p>
</blockquote>
</li>
<li>括号中数字为该月的文章数</li>
<li><img src="/blog/images/hexo/hexo-sidebar-archive.png" alt="sidebar archives"></li>
</ul>
</li>
<li><p>Categories</p>
<blockquote>
<p>呃， 貌似没啥说的。😳</p>
</blockquote>
<ul>
<li><img src="/blog/images/hexo/hexo-sidebar-category.png" alt="sidebar category"></li>
</ul>
</li>
<li><p>Recent posts</p>
<blockquote>
<p>最新文章</p>
</blockquote>
<ul>
<li>默认展示最新的<strong>5</strong>篇，可以在<code>/theme/_config.yml</code>中重新进行设定</li>
<li><img src="/blog/images/hexo/hexo-sidebar-recent.png" alt="sidebar rencent posts"></li>
</ul>
</li>
</ol>
<h2 id="Post-Style"><a href="#Post-Style" class="headerlink" title="Post Style"></a>Post Style</h2><blockquote>
<p>所有配置都在<code>/theme/_config.yml中</code></p>
</blockquote>
<ul>
<li><p>Post meta</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># widget (文章小部件)</span></div><div class="line"><span class="comment"># true 开启</span></div><div class="line"><span class="comment"># false 关闭</span></div><div class="line"><span class="attr">postMeta:</span></div><div class="line"><span class="attr">  author:</span> <span class="literal">true</span> <span class="comment"># 作者</span></div><div class="line"><span class="attr">  date:</span> <span class="literal">true</span> <span class="comment"># 日期</span></div><div class="line"><span class="attr">  tags:</span> <span class="literal">true</span> <span class="comment"># 标签</span></div><div class="line"><span class="attr">  category:</span> <span class="literal">true</span> <span class="comment"># 分类</span></div></pre></td></tr></table></figure>
</li>
<li><p>Code theme</p>
<blockquote>
<p>点击代码块右上角的theme[white|black]可看到效果</p>
</blockquote>
</li>
<li><p>Post toc</p>
<ul>
<li>click toc title [folding | open]</li>
<li>title setting<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">post:</span></div><div class="line">  <span class="comment"># 文章目录标题文字设置</span></div><div class="line"><span class="attr">  toc_title:</span> CONTENT</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Read more</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">post:</span></div><div class="line">  <span class="comment"># 阅读全文文字设置</span></div><div class="line"><span class="attr">  excerpt_link:</span> Read More</div></pre></td></tr></table></figure>
</li>
<li><p>Comment</p>
<blockquote>
<p>评论<br><img src="/blog/images/hexo/hexo-disqus.png" alt="hexo disqus"></p>
</blockquote>
<ul>
<li>DISQUS<blockquote>
<p>国内可能无法访问，如果使用该评论插件，我在<code>main.js</code>文件中做了一次判断，在3s内如果未加载，则显示<strong>Disqus due to network reasons, can not be loaded.</strong>，如果是因为网速不好，在大于3s后加载了，显示上可能会出现点小问题，但是如果是在10s内加载的，显示的问题还是会被移除掉。由于暂时没想到好的解决办法，该bug目前只能先这样，以后有好的办法再解决。但是如果不考虑网速问题。这个判断还是没什么问题的。即在3s内无法加载，则显示<strong>Disqus due to network reasons, can not be loaded.</strong>，否则正常加载Disqus</p>
</blockquote>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">disqus:</span></div><div class="line"><span class="attr">  disqus_shortname:</span> lencx</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Theme-Config"><a href="#Theme-Config" class="headerlink" title="Theme Config"></a>Theme Config</h2><blockquote>
<p>主题配色<br>在<code>/source/css/_theme.color.scss</code>文件中几乎包含了该主题的所有颜色变量（background, color, box-shadow, text-shadow）,在<code>／source/css/variable／_mixin.scss</code>文件中的@mixin radius 参数<code>$radius-enble</code>值为<code>true</code>时启用所有的圆角，<code>false</code>则关闭。</p>
</blockquote>
<h2 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a>Analytics</h2><blockquote>
<p>流量分析</p>
</blockquote>
<ul>
<li>Google Analytics<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">analytics:</span></div><div class="line"><span class="attr">  google_analytics:</span> <span class="comment"># your Google AnalyticsId</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Social"><a href="#Social" class="headerlink" title="Social"></a>Social</h2><blockquote>
<p>社区帐号<br><img src="/blog/images/hexo/hexo-rss.png" alt="hexo rss"><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">social:</span></div><div class="line"><span class="attr">  github:</span> your@github</div><div class="line"><span class="attr">  email:</span> your@email.com</div><div class="line"><span class="attr">  facebook:</span> your@facebook.com</div><div class="line"><span class="attr">  twitter:</span> your@twitter.com</div><div class="line"><span class="attr">  stact_overflow:</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><blockquote>
<p>RSS订阅 在根目录下安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i hexo-generator-feed --save</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># https://github.com/hexojs/hexo-generator-feed</span></div><div class="line"><span class="attr">feed:</span></div><div class="line"><span class="attr">  type:</span> atom</div><div class="line"><span class="attr">  path:</span> atom.xml</div><div class="line">  <span class="comment"># 0/false[all] | number</span></div><div class="line"><span class="attr">  limit:</span> <span class="literal">false</span></div><div class="line">  <span class="comment"># hub:</span></div><div class="line"><span class="attr">  content:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="Keywords-amp-amp-Description"><a href="#Keywords-amp-amp-Description" class="headerlink" title="Keywords &amp;&amp; Description"></a>Keywords &amp;&amp; Description</h2><blockquote>
<p>关键字及描述</p>
<ul>
<li>在 <strong>root _config.yml</strong>中的<code>description</code>为网站描述</li>
<li>post中的描述及关键字则需要自己在模版中进行添加，模板路径为<code>/scaffolds／post.md</code>,多个关键字用半角英文逗号隔开，如果未使用<code>keywords</code>，默认将<code>tags</code>填充为关键字<br><img src="/blog/images/hexo/hexo-scaffolds-post.png" alt="scaffolds post"></li>
</ul>
</blockquote>
<h2 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h2><blockquote>
<p>本地搜索：检索到的关键词高亮，不支持多词搜索<br>优先级：标题 &gt; 标签 &gt; 内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># generator content.json or search.json</span></div><div class="line">npm i hexo-generator-json-content --save</div></pre></td></tr></table></figure></p>
</blockquote>
<p>root _config.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="attr">jsonContent:</span></div><div class="line"><span class="attr">  meta:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  keywords:</span> <span class="literal">false</span> <span class="comment"># language name option </span></div><div class="line"><span class="attr">  dateFormat:</span> YYYY/MM/DD <span class="comment"># format string </span></div><div class="line"><span class="attr">  posts:</span></div><div class="line"><span class="attr">    title:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    tags:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    path:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    date:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    text:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    slug:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    updated:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    comments:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    link:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    permalink:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    excerpt:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    keywords:</span> <span class="literal">false</span> <span class="comment"># but only if root keywords option language was set </span></div><div class="line">    <span class="comment"># raw: false</span></div><div class="line"><span class="attr">    content:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    categories:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  pages:</span> <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><blockquote>
<p>结束语</p>
<blockquote>
<p>还有很多细节上的处理就只能靠自己慢慢发现了。<a href="https://github.com/lencx/hexo-theme-lencx" target="_blank" rel="external">hexo-theme-lencx</a>，本人会长期进行维护，哪天看着哪里不合眼了，还会修修补补，亦或大刀阔斧也说不准。 加点新鲜的，好玩的东东。时间有点仓促，还有很多功能还未添加，以后都会慢慢的加进来。</p>
</blockquote>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;描述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本主题使用&lt;code&gt;pug[jade]&lt;/code&gt;, &lt;code&gt;sass&lt;/code&gt;编写，可用&lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt;对&lt;code&gt;css&lt;/code&gt;，&lt;code&gt;js&lt;/code&gt;进行压缩。之所以选择&lt;code&gt;pug&lt;/code&gt;是因为觉得这种模板语法很优雅（用缩进表示DOM结构，很简洁, 逻辑采用js的语法，作为前端表示无压力， &lt;code&gt;include&lt;/code&gt;, &lt;code&gt;block&lt;/code&gt;, &lt;code&gt;mixins&lt;/code&gt; etc. 用起来也很方便。 具体语法可以参考&lt;a href=&quot;https://pugjs.org/language/mixins.html&quot;&gt;Pug API&lt;/a&gt;，&lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass API&lt;/a&gt;）。本主题支持响应式，未借助第三方库，如想使用栅格系统，在&lt;code&gt;／source/css/part/_grid.scss&lt;/code&gt;中有一个简易版的bootstrap栅格,未build的scss源文件文件可参考&lt;a href=&quot;https://github.com/lencx/bs-grid&quot;&gt;bs-grid&lt;/a&gt;。或者使用&lt;code&gt;postcss&lt;/code&gt;的插件库&lt;code&gt;lost&lt;/code&gt;, &lt;code&gt;postcss-cssnext&lt;/code&gt; etc. 进行编写。了解更多信息，请参考&lt;a href=&quot;https://github.com/postcss/postcss&quot;&gt;postcss&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://lencx.github.io/blog/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://lencx.github.io/blog/tags/hexo/"/>
    
      <category term="theme" scheme="https://lencx.github.io/blog/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>CSS之清除浮动</title>
    <link href="https://lencx.github.io/blog/2016/05/04/css-clearfix/"/>
    <id>https://lencx.github.io/blog/2016/05/04/css-clearfix/</id>
    <published>2016-05-04T06:57:51.000Z</published>
    <updated>2017-03-25T16:16:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>给元素设置浮动属性会使元素漂浮于普通文本流之上，导致元素内部不存在其他普通流元素，表现出的高度为0（高度塌陷，如果外层元素未给出具体高度，这时的盒子模型是不能自动计算出内部元素的实际高度）。<br><img src="/blog/images/css/css-clearfix.png" alt="清除浮动"></p>
</blockquote>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">#wrap&#123;</div><div class="line">    background: red;</div><div class="line">    color: #ff3600;</div><div class="line">&#125;</div><div class="line">#wrap div&#123;</div><div class="line">    width: 400px;</div><div class="line">    background: green;</div><div class="line">    margin: 5px;</div><div class="line">    float: left;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span>我是浮动div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span>我是浮动div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><p>在<code>id=&quot;wrap&quot;</code>的div中的末尾添加额外的标签如div，br，其他标签也可以，但必须是<strong>块级元素</strong>（两种方式）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--使用div标签与其自身的html属性--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear: both"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--使用br标签与其自身的html属性--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span> <span class="attr">clear</span>=<span class="string">"all"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在<code>id=&quot;wrap&quot;</code>的div属性中添加属性（两种方式）。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 父元素添加float,使其脱离普通文本流，盒子模型能够计算其实际的高度（不推荐使用）。 */</span></div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 父元素添加overflow */</span></div><div class="line"><span class="selector-id">#wrap</span>&#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>闭合浮动（闭合浮动原理——自行了解 <code>hasLayout</code> 和 <code>Block formatting contexts</code>）</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"."</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">visibility</span>: hidden;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 改进后的版本 */</span></div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"200B"</span>;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 或者 */</span></div><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span>&#123;</div><div class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;    <span class="comment">/*IE6/IE7*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>sass &amp; postcss</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// placeholder: sass占位符</span></div><div class="line"><span class="comment">/// usage: @extend %clear-fix; </span></div><div class="line">%clearfix &#123;</div><div class="line">    &amp;:after &#123;</div><div class="line">        <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">        <span class="attribute">display</span>: table;</div><div class="line">        <span class="attribute">clear</span>: both;</div><div class="line">        zoom: <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/// postcss lost</span></div><div class="line">lost-utility: clearfix;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注：</strong><del>这是之前写的一篇，之前的博客被我全部删掉了，现在重新开始。时间还是使用之前的创建时间，特此说明。</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;给元素设置浮动属性会使元素漂浮于普通文本流之上，导致元素内部不存在其他普通流元素，表现出的高度为0（高度塌陷，如果外层元素未给出具体高度，这时的盒子模型是不能自动计算出内部元素的实际高度）。&lt;br&gt;&lt;img src=&quot;/blog/images/css/css-clearfix.png&quot; alt=&quot;清除浮动&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://lencx.github.io/blog/categories/CSS/"/>
    
    
      <category term="clearfix" scheme="https://lencx.github.io/blog/tags/clearfix/"/>
    
      <category term="Tricks" scheme="https://lencx.github.io/blog/tags/Tricks/"/>
    
  </entry>
  
</feed>
